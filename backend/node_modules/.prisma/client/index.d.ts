
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Kolcsonzo
 * 
 */
export type Kolcsonzo = $Result.DefaultSelection<Prisma.$KolcsonzoPayload>
/**
 * Model Konyvek
 * 
 */
export type Konyvek = $Result.DefaultSelection<Prisma.$KonyvekPayload>
/**
 * Model Kolcsonzesek
 * 
 */
export type Kolcsonzesek = $Result.DefaultSelection<Prisma.$KolcsonzesekPayload>
/**
 * Model Keses
 * 
 */
export type Keses = $Result.DefaultSelection<Prisma.$KesesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Kolcsonzos
 * const kolcsonzos = await prisma.kolcsonzo.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Kolcsonzos
   * const kolcsonzos = await prisma.kolcsonzo.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.kolcsonzo`: Exposes CRUD operations for the **Kolcsonzo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kolcsonzos
    * const kolcsonzos = await prisma.kolcsonzo.findMany()
    * ```
    */
  get kolcsonzo(): Prisma.KolcsonzoDelegate<ExtArgs>;

  /**
   * `prisma.konyvek`: Exposes CRUD operations for the **Konyvek** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Konyveks
    * const konyveks = await prisma.konyvek.findMany()
    * ```
    */
  get konyvek(): Prisma.KonyvekDelegate<ExtArgs>;

  /**
   * `prisma.kolcsonzesek`: Exposes CRUD operations for the **Kolcsonzesek** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kolcsonzeseks
    * const kolcsonzeseks = await prisma.kolcsonzesek.findMany()
    * ```
    */
  get kolcsonzesek(): Prisma.KolcsonzesekDelegate<ExtArgs>;

  /**
   * `prisma.keses`: Exposes CRUD operations for the **Keses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keses
    * const keses = await prisma.keses.findMany()
    * ```
    */
  get keses(): Prisma.KesesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0-dev.56
   * Query Engine version: 3d9a0d64e7107d8985df64fce153a82e7821aeea
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Kolcsonzo: 'Kolcsonzo',
    Konyvek: 'Konyvek',
    Kolcsonzesek: 'Kolcsonzesek',
    Keses: 'Keses'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'kolcsonzo' | 'konyvek' | 'kolcsonzesek' | 'keses'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Kolcsonzo: {
        payload: Prisma.$KolcsonzoPayload<ExtArgs>
        fields: Prisma.KolcsonzoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KolcsonzoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KolcsonzoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload>
          }
          findFirst: {
            args: Prisma.KolcsonzoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KolcsonzoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload>
          }
          findMany: {
            args: Prisma.KolcsonzoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload>[]
          }
          create: {
            args: Prisma.KolcsonzoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload>
          }
          createMany: {
            args: Prisma.KolcsonzoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KolcsonzoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload>
          }
          update: {
            args: Prisma.KolcsonzoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload>
          }
          deleteMany: {
            args: Prisma.KolcsonzoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KolcsonzoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KolcsonzoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzoPayload>
          }
          aggregate: {
            args: Prisma.KolcsonzoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKolcsonzo>
          }
          groupBy: {
            args: Prisma.KolcsonzoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KolcsonzoGroupByOutputType>[]
          }
          count: {
            args: Prisma.KolcsonzoCountArgs<ExtArgs>,
            result: $Utils.Optional<KolcsonzoCountAggregateOutputType> | number
          }
        }
      }
      Konyvek: {
        payload: Prisma.$KonyvekPayload<ExtArgs>
        fields: Prisma.KonyvekFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KonyvekFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KonyvekFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload>
          }
          findFirst: {
            args: Prisma.KonyvekFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KonyvekFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload>
          }
          findMany: {
            args: Prisma.KonyvekFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload>[]
          }
          create: {
            args: Prisma.KonyvekCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload>
          }
          createMany: {
            args: Prisma.KonyvekCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KonyvekDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload>
          }
          update: {
            args: Prisma.KonyvekUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload>
          }
          deleteMany: {
            args: Prisma.KonyvekDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KonyvekUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KonyvekUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonyvekPayload>
          }
          aggregate: {
            args: Prisma.KonyvekAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKonyvek>
          }
          groupBy: {
            args: Prisma.KonyvekGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KonyvekGroupByOutputType>[]
          }
          count: {
            args: Prisma.KonyvekCountArgs<ExtArgs>,
            result: $Utils.Optional<KonyvekCountAggregateOutputType> | number
          }
        }
      }
      Kolcsonzesek: {
        payload: Prisma.$KolcsonzesekPayload<ExtArgs>
        fields: Prisma.KolcsonzesekFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KolcsonzesekFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KolcsonzesekFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload>
          }
          findFirst: {
            args: Prisma.KolcsonzesekFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KolcsonzesekFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload>
          }
          findMany: {
            args: Prisma.KolcsonzesekFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload>[]
          }
          create: {
            args: Prisma.KolcsonzesekCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload>
          }
          createMany: {
            args: Prisma.KolcsonzesekCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KolcsonzesekDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload>
          }
          update: {
            args: Prisma.KolcsonzesekUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload>
          }
          deleteMany: {
            args: Prisma.KolcsonzesekDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KolcsonzesekUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KolcsonzesekUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KolcsonzesekPayload>
          }
          aggregate: {
            args: Prisma.KolcsonzesekAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKolcsonzesek>
          }
          groupBy: {
            args: Prisma.KolcsonzesekGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KolcsonzesekGroupByOutputType>[]
          }
          count: {
            args: Prisma.KolcsonzesekCountArgs<ExtArgs>,
            result: $Utils.Optional<KolcsonzesekCountAggregateOutputType> | number
          }
        }
      }
      Keses: {
        payload: Prisma.$KesesPayload<ExtArgs>
        fields: Prisma.KesesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KesesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KesesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload>
          }
          findFirst: {
            args: Prisma.KesesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KesesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload>
          }
          findMany: {
            args: Prisma.KesesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload>[]
          }
          create: {
            args: Prisma.KesesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload>
          }
          createMany: {
            args: Prisma.KesesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KesesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload>
          }
          update: {
            args: Prisma.KesesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload>
          }
          deleteMany: {
            args: Prisma.KesesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KesesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KesesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KesesPayload>
          }
          aggregate: {
            args: Prisma.KesesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKeses>
          }
          groupBy: {
            args: Prisma.KesesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KesesGroupByOutputType>[]
          }
          count: {
            args: Prisma.KesesCountArgs<ExtArgs>,
            result: $Utils.Optional<KesesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type KolcsonzoCountOutputType
   */

  export type KolcsonzoCountOutputType = {
    kolcsonzesek: number
  }

  export type KolcsonzoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kolcsonzesek?: boolean | KolcsonzoCountOutputTypeCountKolcsonzesekArgs
  }

  // Custom InputTypes

  /**
   * KolcsonzoCountOutputType without action
   */
  export type KolcsonzoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KolcsonzoCountOutputType
     */
    select?: KolcsonzoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * KolcsonzoCountOutputType without action
   */
  export type KolcsonzoCountOutputTypeCountKolcsonzesekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KolcsonzesekWhereInput
  }



  /**
   * Count Type KonyvekCountOutputType
   */

  export type KonyvekCountOutputType = {
    kolcsonzesek: number
  }

  export type KonyvekCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kolcsonzesek?: boolean | KonyvekCountOutputTypeCountKolcsonzesekArgs
  }

  // Custom InputTypes

  /**
   * KonyvekCountOutputType without action
   */
  export type KonyvekCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonyvekCountOutputType
     */
    select?: KonyvekCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * KonyvekCountOutputType without action
   */
  export type KonyvekCountOutputTypeCountKolcsonzesekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KolcsonzesekWhereInput
  }



  /**
   * Count Type KolcsonzesekCountOutputType
   */

  export type KolcsonzesekCountOutputType = {
    kesett: number
  }

  export type KolcsonzesekCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kesett?: boolean | KolcsonzesekCountOutputTypeCountKesettArgs
  }

  // Custom InputTypes

  /**
   * KolcsonzesekCountOutputType without action
   */
  export type KolcsonzesekCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KolcsonzesekCountOutputType
     */
    select?: KolcsonzesekCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * KolcsonzesekCountOutputType without action
   */
  export type KolcsonzesekCountOutputTypeCountKesettArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KesesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Kolcsonzo
   */

  export type AggregateKolcsonzo = {
    _count: KolcsonzoCountAggregateOutputType | null
    _avg: KolcsonzoAvgAggregateOutputType | null
    _sum: KolcsonzoSumAggregateOutputType | null
    _min: KolcsonzoMinAggregateOutputType | null
    _max: KolcsonzoMaxAggregateOutputType | null
  }

  export type KolcsonzoAvgAggregateOutputType = {
    id: number | null
    kesesek: number | null
  }

  export type KolcsonzoSumAggregateOutputType = {
    id: number | null
    kesesek: number | null
  }

  export type KolcsonzoMinAggregateOutputType = {
    id: number | null
    nev: string | null
    email: string | null
    jelszo: string | null
    elsolatogatas: Date | null
    lakcim: string | null
    telszam: string | null
    kesesek: number | null
  }

  export type KolcsonzoMaxAggregateOutputType = {
    id: number | null
    nev: string | null
    email: string | null
    jelszo: string | null
    elsolatogatas: Date | null
    lakcim: string | null
    telszam: string | null
    kesesek: number | null
  }

  export type KolcsonzoCountAggregateOutputType = {
    id: number
    nev: number
    email: number
    jelszo: number
    elsolatogatas: number
    lakcim: number
    telszam: number
    kesesek: number
    _all: number
  }


  export type KolcsonzoAvgAggregateInputType = {
    id?: true
    kesesek?: true
  }

  export type KolcsonzoSumAggregateInputType = {
    id?: true
    kesesek?: true
  }

  export type KolcsonzoMinAggregateInputType = {
    id?: true
    nev?: true
    email?: true
    jelszo?: true
    elsolatogatas?: true
    lakcim?: true
    telszam?: true
    kesesek?: true
  }

  export type KolcsonzoMaxAggregateInputType = {
    id?: true
    nev?: true
    email?: true
    jelszo?: true
    elsolatogatas?: true
    lakcim?: true
    telszam?: true
    kesesek?: true
  }

  export type KolcsonzoCountAggregateInputType = {
    id?: true
    nev?: true
    email?: true
    jelszo?: true
    elsolatogatas?: true
    lakcim?: true
    telszam?: true
    kesesek?: true
    _all?: true
  }

  export type KolcsonzoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kolcsonzo to aggregate.
     */
    where?: KolcsonzoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kolcsonzos to fetch.
     */
    orderBy?: KolcsonzoOrderByWithRelationInput | KolcsonzoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KolcsonzoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kolcsonzos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kolcsonzos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kolcsonzos
    **/
    _count?: true | KolcsonzoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KolcsonzoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KolcsonzoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KolcsonzoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KolcsonzoMaxAggregateInputType
  }

  export type GetKolcsonzoAggregateType<T extends KolcsonzoAggregateArgs> = {
        [P in keyof T & keyof AggregateKolcsonzo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKolcsonzo[P]>
      : GetScalarType<T[P], AggregateKolcsonzo[P]>
  }




  export type KolcsonzoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KolcsonzoWhereInput
    orderBy?: KolcsonzoOrderByWithAggregationInput | KolcsonzoOrderByWithAggregationInput[]
    by: KolcsonzoScalarFieldEnum[] | KolcsonzoScalarFieldEnum
    having?: KolcsonzoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KolcsonzoCountAggregateInputType | true
    _avg?: KolcsonzoAvgAggregateInputType
    _sum?: KolcsonzoSumAggregateInputType
    _min?: KolcsonzoMinAggregateInputType
    _max?: KolcsonzoMaxAggregateInputType
  }

  export type KolcsonzoGroupByOutputType = {
    id: number
    nev: string
    email: string
    jelszo: string
    elsolatogatas: Date
    lakcim: string
    telszam: string
    kesesek: number | null
    _count: KolcsonzoCountAggregateOutputType | null
    _avg: KolcsonzoAvgAggregateOutputType | null
    _sum: KolcsonzoSumAggregateOutputType | null
    _min: KolcsonzoMinAggregateOutputType | null
    _max: KolcsonzoMaxAggregateOutputType | null
  }

  type GetKolcsonzoGroupByPayload<T extends KolcsonzoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KolcsonzoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KolcsonzoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KolcsonzoGroupByOutputType[P]>
            : GetScalarType<T[P], KolcsonzoGroupByOutputType[P]>
        }
      >
    >


  export type KolcsonzoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nev?: boolean
    email?: boolean
    jelszo?: boolean
    elsolatogatas?: boolean
    lakcim?: boolean
    telszam?: boolean
    kesesek?: boolean
    kolcsonzesek?: boolean | Kolcsonzo$kolcsonzesekArgs<ExtArgs>
    _count?: boolean | KolcsonzoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kolcsonzo"]>

  export type KolcsonzoSelectScalar = {
    id?: boolean
    nev?: boolean
    email?: boolean
    jelszo?: boolean
    elsolatogatas?: boolean
    lakcim?: boolean
    telszam?: boolean
    kesesek?: boolean
  }

  export type KolcsonzoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kolcsonzesek?: boolean | Kolcsonzo$kolcsonzesekArgs<ExtArgs>
    _count?: boolean | KolcsonzoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $KolcsonzoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kolcsonzo"
    objects: {
      kolcsonzesek: Prisma.$KolcsonzesekPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nev: string
      email: string
      jelszo: string
      elsolatogatas: Date
      lakcim: string
      telszam: string
      kesesek: number | null
    }, ExtArgs["result"]["kolcsonzo"]>
    composites: {}
  }


  type KolcsonzoGetPayload<S extends boolean | null | undefined | KolcsonzoDefaultArgs> = $Result.GetResult<Prisma.$KolcsonzoPayload, S>

  type KolcsonzoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KolcsonzoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KolcsonzoCountAggregateInputType | true
    }

  export interface KolcsonzoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kolcsonzo'], meta: { name: 'Kolcsonzo' } }
    /**
     * Find zero or one Kolcsonzo that matches the filter.
     * @param {KolcsonzoFindUniqueArgs} args - Arguments to find a Kolcsonzo
     * @example
     * // Get one Kolcsonzo
     * const kolcsonzo = await prisma.kolcsonzo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KolcsonzoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzoFindUniqueArgs<ExtArgs>>
    ): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Kolcsonzo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KolcsonzoFindUniqueOrThrowArgs} args - Arguments to find a Kolcsonzo
     * @example
     * // Get one Kolcsonzo
     * const kolcsonzo = await prisma.kolcsonzo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KolcsonzoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Kolcsonzo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzoFindFirstArgs} args - Arguments to find a Kolcsonzo
     * @example
     * // Get one Kolcsonzo
     * const kolcsonzo = await prisma.kolcsonzo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KolcsonzoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzoFindFirstArgs<ExtArgs>>
    ): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Kolcsonzo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzoFindFirstOrThrowArgs} args - Arguments to find a Kolcsonzo
     * @example
     * // Get one Kolcsonzo
     * const kolcsonzo = await prisma.kolcsonzo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KolcsonzoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Kolcsonzos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kolcsonzos
     * const kolcsonzos = await prisma.kolcsonzo.findMany()
     * 
     * // Get first 10 Kolcsonzos
     * const kolcsonzos = await prisma.kolcsonzo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kolcsonzoWithIdOnly = await prisma.kolcsonzo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KolcsonzoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Kolcsonzo.
     * @param {KolcsonzoCreateArgs} args - Arguments to create a Kolcsonzo.
     * @example
     * // Create one Kolcsonzo
     * const Kolcsonzo = await prisma.kolcsonzo.create({
     *   data: {
     *     // ... data to create a Kolcsonzo
     *   }
     * })
     * 
    **/
    create<T extends KolcsonzoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzoCreateArgs<ExtArgs>>
    ): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Kolcsonzos.
     *     @param {KolcsonzoCreateManyArgs} args - Arguments to create many Kolcsonzos.
     *     @example
     *     // Create many Kolcsonzos
     *     const kolcsonzo = await prisma.kolcsonzo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KolcsonzoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kolcsonzo.
     * @param {KolcsonzoDeleteArgs} args - Arguments to delete one Kolcsonzo.
     * @example
     * // Delete one Kolcsonzo
     * const Kolcsonzo = await prisma.kolcsonzo.delete({
     *   where: {
     *     // ... filter to delete one Kolcsonzo
     *   }
     * })
     * 
    **/
    delete<T extends KolcsonzoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzoDeleteArgs<ExtArgs>>
    ): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Kolcsonzo.
     * @param {KolcsonzoUpdateArgs} args - Arguments to update one Kolcsonzo.
     * @example
     * // Update one Kolcsonzo
     * const kolcsonzo = await prisma.kolcsonzo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KolcsonzoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzoUpdateArgs<ExtArgs>>
    ): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Kolcsonzos.
     * @param {KolcsonzoDeleteManyArgs} args - Arguments to filter Kolcsonzos to delete.
     * @example
     * // Delete a few Kolcsonzos
     * const { count } = await prisma.kolcsonzo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KolcsonzoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kolcsonzos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kolcsonzos
     * const kolcsonzo = await prisma.kolcsonzo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KolcsonzoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kolcsonzo.
     * @param {KolcsonzoUpsertArgs} args - Arguments to update or create a Kolcsonzo.
     * @example
     * // Update or create a Kolcsonzo
     * const kolcsonzo = await prisma.kolcsonzo.upsert({
     *   create: {
     *     // ... data to create a Kolcsonzo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kolcsonzo we want to update
     *   }
     * })
    **/
    upsert<T extends KolcsonzoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzoUpsertArgs<ExtArgs>>
    ): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Kolcsonzos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzoCountArgs} args - Arguments to filter Kolcsonzos to count.
     * @example
     * // Count the number of Kolcsonzos
     * const count = await prisma.kolcsonzo.count({
     *   where: {
     *     // ... the filter for the Kolcsonzos we want to count
     *   }
     * })
    **/
    count<T extends KolcsonzoCountArgs>(
      args?: Subset<T, KolcsonzoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KolcsonzoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kolcsonzo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KolcsonzoAggregateArgs>(args: Subset<T, KolcsonzoAggregateArgs>): Prisma.PrismaPromise<GetKolcsonzoAggregateType<T>>

    /**
     * Group by Kolcsonzo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KolcsonzoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KolcsonzoGroupByArgs['orderBy'] }
        : { orderBy?: KolcsonzoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KolcsonzoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKolcsonzoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kolcsonzo model
   */
  readonly fields: KolcsonzoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kolcsonzo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KolcsonzoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    kolcsonzesek<T extends Kolcsonzo$kolcsonzesekArgs<ExtArgs> = {}>(args?: Subset<T, Kolcsonzo$kolcsonzesekArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Kolcsonzo model
   */ 
  interface KolcsonzoFieldRefs {
    readonly id: FieldRef<"Kolcsonzo", 'Int'>
    readonly nev: FieldRef<"Kolcsonzo", 'String'>
    readonly email: FieldRef<"Kolcsonzo", 'String'>
    readonly jelszo: FieldRef<"Kolcsonzo", 'String'>
    readonly elsolatogatas: FieldRef<"Kolcsonzo", 'DateTime'>
    readonly lakcim: FieldRef<"Kolcsonzo", 'String'>
    readonly telszam: FieldRef<"Kolcsonzo", 'String'>
    readonly kesesek: FieldRef<"Kolcsonzo", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Kolcsonzo findUnique
   */
  export type KolcsonzoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzo to fetch.
     */
    where: KolcsonzoWhereUniqueInput
  }


  /**
   * Kolcsonzo findUniqueOrThrow
   */
  export type KolcsonzoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzo to fetch.
     */
    where: KolcsonzoWhereUniqueInput
  }


  /**
   * Kolcsonzo findFirst
   */
  export type KolcsonzoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzo to fetch.
     */
    where?: KolcsonzoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kolcsonzos to fetch.
     */
    orderBy?: KolcsonzoOrderByWithRelationInput | KolcsonzoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kolcsonzos.
     */
    cursor?: KolcsonzoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kolcsonzos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kolcsonzos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kolcsonzos.
     */
    distinct?: KolcsonzoScalarFieldEnum | KolcsonzoScalarFieldEnum[]
  }


  /**
   * Kolcsonzo findFirstOrThrow
   */
  export type KolcsonzoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzo to fetch.
     */
    where?: KolcsonzoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kolcsonzos to fetch.
     */
    orderBy?: KolcsonzoOrderByWithRelationInput | KolcsonzoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kolcsonzos.
     */
    cursor?: KolcsonzoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kolcsonzos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kolcsonzos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kolcsonzos.
     */
    distinct?: KolcsonzoScalarFieldEnum | KolcsonzoScalarFieldEnum[]
  }


  /**
   * Kolcsonzo findMany
   */
  export type KolcsonzoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzos to fetch.
     */
    where?: KolcsonzoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kolcsonzos to fetch.
     */
    orderBy?: KolcsonzoOrderByWithRelationInput | KolcsonzoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kolcsonzos.
     */
    cursor?: KolcsonzoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kolcsonzos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kolcsonzos.
     */
    skip?: number
    distinct?: KolcsonzoScalarFieldEnum | KolcsonzoScalarFieldEnum[]
  }


  /**
   * Kolcsonzo create
   */
  export type KolcsonzoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * The data needed to create a Kolcsonzo.
     */
    data: XOR<KolcsonzoCreateInput, KolcsonzoUncheckedCreateInput>
  }


  /**
   * Kolcsonzo createMany
   */
  export type KolcsonzoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kolcsonzos.
     */
    data: KolcsonzoCreateManyInput | KolcsonzoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Kolcsonzo update
   */
  export type KolcsonzoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * The data needed to update a Kolcsonzo.
     */
    data: XOR<KolcsonzoUpdateInput, KolcsonzoUncheckedUpdateInput>
    /**
     * Choose, which Kolcsonzo to update.
     */
    where: KolcsonzoWhereUniqueInput
  }


  /**
   * Kolcsonzo updateMany
   */
  export type KolcsonzoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kolcsonzos.
     */
    data: XOR<KolcsonzoUpdateManyMutationInput, KolcsonzoUncheckedUpdateManyInput>
    /**
     * Filter which Kolcsonzos to update
     */
    where?: KolcsonzoWhereInput
  }


  /**
   * Kolcsonzo upsert
   */
  export type KolcsonzoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * The filter to search for the Kolcsonzo to update in case it exists.
     */
    where: KolcsonzoWhereUniqueInput
    /**
     * In case the Kolcsonzo found by the `where` argument doesn't exist, create a new Kolcsonzo with this data.
     */
    create: XOR<KolcsonzoCreateInput, KolcsonzoUncheckedCreateInput>
    /**
     * In case the Kolcsonzo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KolcsonzoUpdateInput, KolcsonzoUncheckedUpdateInput>
  }


  /**
   * Kolcsonzo delete
   */
  export type KolcsonzoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
    /**
     * Filter which Kolcsonzo to delete.
     */
    where: KolcsonzoWhereUniqueInput
  }


  /**
   * Kolcsonzo deleteMany
   */
  export type KolcsonzoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kolcsonzos to delete
     */
    where?: KolcsonzoWhereInput
  }


  /**
   * Kolcsonzo.kolcsonzesek
   */
  export type Kolcsonzo$kolcsonzesekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    where?: KolcsonzesekWhereInput
    orderBy?: KolcsonzesekOrderByWithRelationInput | KolcsonzesekOrderByWithRelationInput[]
    cursor?: KolcsonzesekWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KolcsonzesekScalarFieldEnum | KolcsonzesekScalarFieldEnum[]
  }


  /**
   * Kolcsonzo without action
   */
  export type KolcsonzoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzo
     */
    select?: KolcsonzoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzoInclude<ExtArgs> | null
  }



  /**
   * Model Konyvek
   */

  export type AggregateKonyvek = {
    _count: KonyvekCountAggregateOutputType | null
    _avg: KonyvekAvgAggregateOutputType | null
    _sum: KonyvekSumAggregateOutputType | null
    _min: KonyvekMinAggregateOutputType | null
    _max: KonyvekMaxAggregateOutputType | null
  }

  export type KonyvekAvgAggregateOutputType = {
    id: number | null
  }

  export type KonyvekSumAggregateOutputType = {
    id: number | null
  }

  export type KonyvekMinAggregateOutputType = {
    id: number | null
    cim: string | null
    iro: string | null
    kategoria: string | null
    kiadasDatuma: string | null
  }

  export type KonyvekMaxAggregateOutputType = {
    id: number | null
    cim: string | null
    iro: string | null
    kategoria: string | null
    kiadasDatuma: string | null
  }

  export type KonyvekCountAggregateOutputType = {
    id: number
    cim: number
    iro: number
    kategoria: number
    kiadasDatuma: number
    _all: number
  }


  export type KonyvekAvgAggregateInputType = {
    id?: true
  }

  export type KonyvekSumAggregateInputType = {
    id?: true
  }

  export type KonyvekMinAggregateInputType = {
    id?: true
    cim?: true
    iro?: true
    kategoria?: true
    kiadasDatuma?: true
  }

  export type KonyvekMaxAggregateInputType = {
    id?: true
    cim?: true
    iro?: true
    kategoria?: true
    kiadasDatuma?: true
  }

  export type KonyvekCountAggregateInputType = {
    id?: true
    cim?: true
    iro?: true
    kategoria?: true
    kiadasDatuma?: true
    _all?: true
  }

  export type KonyvekAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Konyvek to aggregate.
     */
    where?: KonyvekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Konyveks to fetch.
     */
    orderBy?: KonyvekOrderByWithRelationInput | KonyvekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KonyvekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Konyveks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Konyveks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Konyveks
    **/
    _count?: true | KonyvekCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KonyvekAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KonyvekSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KonyvekMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KonyvekMaxAggregateInputType
  }

  export type GetKonyvekAggregateType<T extends KonyvekAggregateArgs> = {
        [P in keyof T & keyof AggregateKonyvek]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKonyvek[P]>
      : GetScalarType<T[P], AggregateKonyvek[P]>
  }




  export type KonyvekGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KonyvekWhereInput
    orderBy?: KonyvekOrderByWithAggregationInput | KonyvekOrderByWithAggregationInput[]
    by: KonyvekScalarFieldEnum[] | KonyvekScalarFieldEnum
    having?: KonyvekScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KonyvekCountAggregateInputType | true
    _avg?: KonyvekAvgAggregateInputType
    _sum?: KonyvekSumAggregateInputType
    _min?: KonyvekMinAggregateInputType
    _max?: KonyvekMaxAggregateInputType
  }

  export type KonyvekGroupByOutputType = {
    id: number
    cim: string
    iro: string
    kategoria: string
    kiadasDatuma: string
    _count: KonyvekCountAggregateOutputType | null
    _avg: KonyvekAvgAggregateOutputType | null
    _sum: KonyvekSumAggregateOutputType | null
    _min: KonyvekMinAggregateOutputType | null
    _max: KonyvekMaxAggregateOutputType | null
  }

  type GetKonyvekGroupByPayload<T extends KonyvekGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KonyvekGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KonyvekGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KonyvekGroupByOutputType[P]>
            : GetScalarType<T[P], KonyvekGroupByOutputType[P]>
        }
      >
    >


  export type KonyvekSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cim?: boolean
    iro?: boolean
    kategoria?: boolean
    kiadasDatuma?: boolean
    kolcsonzesek?: boolean | Konyvek$kolcsonzesekArgs<ExtArgs>
    _count?: boolean | KonyvekCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["konyvek"]>

  export type KonyvekSelectScalar = {
    id?: boolean
    cim?: boolean
    iro?: boolean
    kategoria?: boolean
    kiadasDatuma?: boolean
  }

  export type KonyvekInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kolcsonzesek?: boolean | Konyvek$kolcsonzesekArgs<ExtArgs>
    _count?: boolean | KonyvekCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $KonyvekPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Konyvek"
    objects: {
      kolcsonzesek: Prisma.$KolcsonzesekPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cim: string
      iro: string
      kategoria: string
      kiadasDatuma: string
    }, ExtArgs["result"]["konyvek"]>
    composites: {}
  }


  type KonyvekGetPayload<S extends boolean | null | undefined | KonyvekDefaultArgs> = $Result.GetResult<Prisma.$KonyvekPayload, S>

  type KonyvekCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KonyvekFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KonyvekCountAggregateInputType | true
    }

  export interface KonyvekDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Konyvek'], meta: { name: 'Konyvek' } }
    /**
     * Find zero or one Konyvek that matches the filter.
     * @param {KonyvekFindUniqueArgs} args - Arguments to find a Konyvek
     * @example
     * // Get one Konyvek
     * const konyvek = await prisma.konyvek.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KonyvekFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KonyvekFindUniqueArgs<ExtArgs>>
    ): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Konyvek that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KonyvekFindUniqueOrThrowArgs} args - Arguments to find a Konyvek
     * @example
     * // Get one Konyvek
     * const konyvek = await prisma.konyvek.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KonyvekFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KonyvekFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Konyvek that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonyvekFindFirstArgs} args - Arguments to find a Konyvek
     * @example
     * // Get one Konyvek
     * const konyvek = await prisma.konyvek.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KonyvekFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KonyvekFindFirstArgs<ExtArgs>>
    ): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Konyvek that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonyvekFindFirstOrThrowArgs} args - Arguments to find a Konyvek
     * @example
     * // Get one Konyvek
     * const konyvek = await prisma.konyvek.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KonyvekFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KonyvekFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Konyveks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonyvekFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Konyveks
     * const konyveks = await prisma.konyvek.findMany()
     * 
     * // Get first 10 Konyveks
     * const konyveks = await prisma.konyvek.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const konyvekWithIdOnly = await prisma.konyvek.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KonyvekFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KonyvekFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Konyvek.
     * @param {KonyvekCreateArgs} args - Arguments to create a Konyvek.
     * @example
     * // Create one Konyvek
     * const Konyvek = await prisma.konyvek.create({
     *   data: {
     *     // ... data to create a Konyvek
     *   }
     * })
     * 
    **/
    create<T extends KonyvekCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KonyvekCreateArgs<ExtArgs>>
    ): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Konyveks.
     *     @param {KonyvekCreateManyArgs} args - Arguments to create many Konyveks.
     *     @example
     *     // Create many Konyveks
     *     const konyvek = await prisma.konyvek.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KonyvekCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KonyvekCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Konyvek.
     * @param {KonyvekDeleteArgs} args - Arguments to delete one Konyvek.
     * @example
     * // Delete one Konyvek
     * const Konyvek = await prisma.konyvek.delete({
     *   where: {
     *     // ... filter to delete one Konyvek
     *   }
     * })
     * 
    **/
    delete<T extends KonyvekDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KonyvekDeleteArgs<ExtArgs>>
    ): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Konyvek.
     * @param {KonyvekUpdateArgs} args - Arguments to update one Konyvek.
     * @example
     * // Update one Konyvek
     * const konyvek = await prisma.konyvek.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KonyvekUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KonyvekUpdateArgs<ExtArgs>>
    ): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Konyveks.
     * @param {KonyvekDeleteManyArgs} args - Arguments to filter Konyveks to delete.
     * @example
     * // Delete a few Konyveks
     * const { count } = await prisma.konyvek.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KonyvekDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KonyvekDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Konyveks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonyvekUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Konyveks
     * const konyvek = await prisma.konyvek.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KonyvekUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KonyvekUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Konyvek.
     * @param {KonyvekUpsertArgs} args - Arguments to update or create a Konyvek.
     * @example
     * // Update or create a Konyvek
     * const konyvek = await prisma.konyvek.upsert({
     *   create: {
     *     // ... data to create a Konyvek
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Konyvek we want to update
     *   }
     * })
    **/
    upsert<T extends KonyvekUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KonyvekUpsertArgs<ExtArgs>>
    ): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Konyveks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonyvekCountArgs} args - Arguments to filter Konyveks to count.
     * @example
     * // Count the number of Konyveks
     * const count = await prisma.konyvek.count({
     *   where: {
     *     // ... the filter for the Konyveks we want to count
     *   }
     * })
    **/
    count<T extends KonyvekCountArgs>(
      args?: Subset<T, KonyvekCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KonyvekCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Konyvek.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonyvekAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KonyvekAggregateArgs>(args: Subset<T, KonyvekAggregateArgs>): Prisma.PrismaPromise<GetKonyvekAggregateType<T>>

    /**
     * Group by Konyvek.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonyvekGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KonyvekGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KonyvekGroupByArgs['orderBy'] }
        : { orderBy?: KonyvekGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KonyvekGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKonyvekGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Konyvek model
   */
  readonly fields: KonyvekFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Konyvek.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KonyvekClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    kolcsonzesek<T extends Konyvek$kolcsonzesekArgs<ExtArgs> = {}>(args?: Subset<T, Konyvek$kolcsonzesekArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Konyvek model
   */ 
  interface KonyvekFieldRefs {
    readonly id: FieldRef<"Konyvek", 'Int'>
    readonly cim: FieldRef<"Konyvek", 'String'>
    readonly iro: FieldRef<"Konyvek", 'String'>
    readonly kategoria: FieldRef<"Konyvek", 'String'>
    readonly kiadasDatuma: FieldRef<"Konyvek", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Konyvek findUnique
   */
  export type KonyvekFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * Filter, which Konyvek to fetch.
     */
    where: KonyvekWhereUniqueInput
  }


  /**
   * Konyvek findUniqueOrThrow
   */
  export type KonyvekFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * Filter, which Konyvek to fetch.
     */
    where: KonyvekWhereUniqueInput
  }


  /**
   * Konyvek findFirst
   */
  export type KonyvekFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * Filter, which Konyvek to fetch.
     */
    where?: KonyvekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Konyveks to fetch.
     */
    orderBy?: KonyvekOrderByWithRelationInput | KonyvekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Konyveks.
     */
    cursor?: KonyvekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Konyveks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Konyveks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Konyveks.
     */
    distinct?: KonyvekScalarFieldEnum | KonyvekScalarFieldEnum[]
  }


  /**
   * Konyvek findFirstOrThrow
   */
  export type KonyvekFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * Filter, which Konyvek to fetch.
     */
    where?: KonyvekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Konyveks to fetch.
     */
    orderBy?: KonyvekOrderByWithRelationInput | KonyvekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Konyveks.
     */
    cursor?: KonyvekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Konyveks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Konyveks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Konyveks.
     */
    distinct?: KonyvekScalarFieldEnum | KonyvekScalarFieldEnum[]
  }


  /**
   * Konyvek findMany
   */
  export type KonyvekFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * Filter, which Konyveks to fetch.
     */
    where?: KonyvekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Konyveks to fetch.
     */
    orderBy?: KonyvekOrderByWithRelationInput | KonyvekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Konyveks.
     */
    cursor?: KonyvekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Konyveks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Konyveks.
     */
    skip?: number
    distinct?: KonyvekScalarFieldEnum | KonyvekScalarFieldEnum[]
  }


  /**
   * Konyvek create
   */
  export type KonyvekCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * The data needed to create a Konyvek.
     */
    data: XOR<KonyvekCreateInput, KonyvekUncheckedCreateInput>
  }


  /**
   * Konyvek createMany
   */
  export type KonyvekCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Konyveks.
     */
    data: KonyvekCreateManyInput | KonyvekCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Konyvek update
   */
  export type KonyvekUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * The data needed to update a Konyvek.
     */
    data: XOR<KonyvekUpdateInput, KonyvekUncheckedUpdateInput>
    /**
     * Choose, which Konyvek to update.
     */
    where: KonyvekWhereUniqueInput
  }


  /**
   * Konyvek updateMany
   */
  export type KonyvekUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Konyveks.
     */
    data: XOR<KonyvekUpdateManyMutationInput, KonyvekUncheckedUpdateManyInput>
    /**
     * Filter which Konyveks to update
     */
    where?: KonyvekWhereInput
  }


  /**
   * Konyvek upsert
   */
  export type KonyvekUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * The filter to search for the Konyvek to update in case it exists.
     */
    where: KonyvekWhereUniqueInput
    /**
     * In case the Konyvek found by the `where` argument doesn't exist, create a new Konyvek with this data.
     */
    create: XOR<KonyvekCreateInput, KonyvekUncheckedCreateInput>
    /**
     * In case the Konyvek was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KonyvekUpdateInput, KonyvekUncheckedUpdateInput>
  }


  /**
   * Konyvek delete
   */
  export type KonyvekDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
    /**
     * Filter which Konyvek to delete.
     */
    where: KonyvekWhereUniqueInput
  }


  /**
   * Konyvek deleteMany
   */
  export type KonyvekDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Konyveks to delete
     */
    where?: KonyvekWhereInput
  }


  /**
   * Konyvek.kolcsonzesek
   */
  export type Konyvek$kolcsonzesekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    where?: KolcsonzesekWhereInput
    orderBy?: KolcsonzesekOrderByWithRelationInput | KolcsonzesekOrderByWithRelationInput[]
    cursor?: KolcsonzesekWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KolcsonzesekScalarFieldEnum | KolcsonzesekScalarFieldEnum[]
  }


  /**
   * Konyvek without action
   */
  export type KonyvekDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Konyvek
     */
    select?: KonyvekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KonyvekInclude<ExtArgs> | null
  }



  /**
   * Model Kolcsonzesek
   */

  export type AggregateKolcsonzesek = {
    _count: KolcsonzesekCountAggregateOutputType | null
    _avg: KolcsonzesekAvgAggregateOutputType | null
    _sum: KolcsonzesekSumAggregateOutputType | null
    _min: KolcsonzesekMinAggregateOutputType | null
    _max: KolcsonzesekMaxAggregateOutputType | null
  }

  export type KolcsonzesekAvgAggregateOutputType = {
    id: number | null
    kcs_id: number | null
    kny_id: number | null
  }

  export type KolcsonzesekSumAggregateOutputType = {
    id: number | null
    kcs_id: number | null
    kny_id: number | null
  }

  export type KolcsonzesekMinAggregateOutputType = {
    id: number | null
    kivitel: Date | null
    hatarido: Date | null
    Visszahozatal: Date | null
    kcs_id: number | null
    kny_id: number | null
  }

  export type KolcsonzesekMaxAggregateOutputType = {
    id: number | null
    kivitel: Date | null
    hatarido: Date | null
    Visszahozatal: Date | null
    kcs_id: number | null
    kny_id: number | null
  }

  export type KolcsonzesekCountAggregateOutputType = {
    id: number
    kivitel: number
    hatarido: number
    Visszahozatal: number
    kcs_id: number
    kny_id: number
    _all: number
  }


  export type KolcsonzesekAvgAggregateInputType = {
    id?: true
    kcs_id?: true
    kny_id?: true
  }

  export type KolcsonzesekSumAggregateInputType = {
    id?: true
    kcs_id?: true
    kny_id?: true
  }

  export type KolcsonzesekMinAggregateInputType = {
    id?: true
    kivitel?: true
    hatarido?: true
    Visszahozatal?: true
    kcs_id?: true
    kny_id?: true
  }

  export type KolcsonzesekMaxAggregateInputType = {
    id?: true
    kivitel?: true
    hatarido?: true
    Visszahozatal?: true
    kcs_id?: true
    kny_id?: true
  }

  export type KolcsonzesekCountAggregateInputType = {
    id?: true
    kivitel?: true
    hatarido?: true
    Visszahozatal?: true
    kcs_id?: true
    kny_id?: true
    _all?: true
  }

  export type KolcsonzesekAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kolcsonzesek to aggregate.
     */
    where?: KolcsonzesekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kolcsonzeseks to fetch.
     */
    orderBy?: KolcsonzesekOrderByWithRelationInput | KolcsonzesekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KolcsonzesekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kolcsonzeseks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kolcsonzeseks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kolcsonzeseks
    **/
    _count?: true | KolcsonzesekCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KolcsonzesekAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KolcsonzesekSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KolcsonzesekMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KolcsonzesekMaxAggregateInputType
  }

  export type GetKolcsonzesekAggregateType<T extends KolcsonzesekAggregateArgs> = {
        [P in keyof T & keyof AggregateKolcsonzesek]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKolcsonzesek[P]>
      : GetScalarType<T[P], AggregateKolcsonzesek[P]>
  }




  export type KolcsonzesekGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KolcsonzesekWhereInput
    orderBy?: KolcsonzesekOrderByWithAggregationInput | KolcsonzesekOrderByWithAggregationInput[]
    by: KolcsonzesekScalarFieldEnum[] | KolcsonzesekScalarFieldEnum
    having?: KolcsonzesekScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KolcsonzesekCountAggregateInputType | true
    _avg?: KolcsonzesekAvgAggregateInputType
    _sum?: KolcsonzesekSumAggregateInputType
    _min?: KolcsonzesekMinAggregateInputType
    _max?: KolcsonzesekMaxAggregateInputType
  }

  export type KolcsonzesekGroupByOutputType = {
    id: number
    kivitel: Date
    hatarido: Date
    Visszahozatal: Date | null
    kcs_id: number
    kny_id: number
    _count: KolcsonzesekCountAggregateOutputType | null
    _avg: KolcsonzesekAvgAggregateOutputType | null
    _sum: KolcsonzesekSumAggregateOutputType | null
    _min: KolcsonzesekMinAggregateOutputType | null
    _max: KolcsonzesekMaxAggregateOutputType | null
  }

  type GetKolcsonzesekGroupByPayload<T extends KolcsonzesekGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KolcsonzesekGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KolcsonzesekGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KolcsonzesekGroupByOutputType[P]>
            : GetScalarType<T[P], KolcsonzesekGroupByOutputType[P]>
        }
      >
    >


  export type KolcsonzesekSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kivitel?: boolean
    hatarido?: boolean
    Visszahozatal?: boolean
    kcs_id?: boolean
    kny_id?: boolean
    kolcsonzo?: boolean | KolcsonzoDefaultArgs<ExtArgs>
    konyv?: boolean | KonyvekDefaultArgs<ExtArgs>
    kesett?: boolean | Kolcsonzesek$kesettArgs<ExtArgs>
    _count?: boolean | KolcsonzesekCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kolcsonzesek"]>

  export type KolcsonzesekSelectScalar = {
    id?: boolean
    kivitel?: boolean
    hatarido?: boolean
    Visszahozatal?: boolean
    kcs_id?: boolean
    kny_id?: boolean
  }

  export type KolcsonzesekInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kolcsonzo?: boolean | KolcsonzoDefaultArgs<ExtArgs>
    konyv?: boolean | KonyvekDefaultArgs<ExtArgs>
    kesett?: boolean | Kolcsonzesek$kesettArgs<ExtArgs>
    _count?: boolean | KolcsonzesekCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $KolcsonzesekPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kolcsonzesek"
    objects: {
      kolcsonzo: Prisma.$KolcsonzoPayload<ExtArgs>
      konyv: Prisma.$KonyvekPayload<ExtArgs>
      kesett: Prisma.$KesesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kivitel: Date
      hatarido: Date
      Visszahozatal: Date | null
      kcs_id: number
      kny_id: number
    }, ExtArgs["result"]["kolcsonzesek"]>
    composites: {}
  }


  type KolcsonzesekGetPayload<S extends boolean | null | undefined | KolcsonzesekDefaultArgs> = $Result.GetResult<Prisma.$KolcsonzesekPayload, S>

  type KolcsonzesekCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KolcsonzesekFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KolcsonzesekCountAggregateInputType | true
    }

  export interface KolcsonzesekDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kolcsonzesek'], meta: { name: 'Kolcsonzesek' } }
    /**
     * Find zero or one Kolcsonzesek that matches the filter.
     * @param {KolcsonzesekFindUniqueArgs} args - Arguments to find a Kolcsonzesek
     * @example
     * // Get one Kolcsonzesek
     * const kolcsonzesek = await prisma.kolcsonzesek.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KolcsonzesekFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzesekFindUniqueArgs<ExtArgs>>
    ): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Kolcsonzesek that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KolcsonzesekFindUniqueOrThrowArgs} args - Arguments to find a Kolcsonzesek
     * @example
     * // Get one Kolcsonzesek
     * const kolcsonzesek = await prisma.kolcsonzesek.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KolcsonzesekFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzesekFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Kolcsonzesek that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzesekFindFirstArgs} args - Arguments to find a Kolcsonzesek
     * @example
     * // Get one Kolcsonzesek
     * const kolcsonzesek = await prisma.kolcsonzesek.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KolcsonzesekFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzesekFindFirstArgs<ExtArgs>>
    ): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Kolcsonzesek that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzesekFindFirstOrThrowArgs} args - Arguments to find a Kolcsonzesek
     * @example
     * // Get one Kolcsonzesek
     * const kolcsonzesek = await prisma.kolcsonzesek.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KolcsonzesekFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzesekFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Kolcsonzeseks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzesekFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kolcsonzeseks
     * const kolcsonzeseks = await prisma.kolcsonzesek.findMany()
     * 
     * // Get first 10 Kolcsonzeseks
     * const kolcsonzeseks = await prisma.kolcsonzesek.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kolcsonzesekWithIdOnly = await prisma.kolcsonzesek.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KolcsonzesekFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzesekFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Kolcsonzesek.
     * @param {KolcsonzesekCreateArgs} args - Arguments to create a Kolcsonzesek.
     * @example
     * // Create one Kolcsonzesek
     * const Kolcsonzesek = await prisma.kolcsonzesek.create({
     *   data: {
     *     // ... data to create a Kolcsonzesek
     *   }
     * })
     * 
    **/
    create<T extends KolcsonzesekCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzesekCreateArgs<ExtArgs>>
    ): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Kolcsonzeseks.
     *     @param {KolcsonzesekCreateManyArgs} args - Arguments to create many Kolcsonzeseks.
     *     @example
     *     // Create many Kolcsonzeseks
     *     const kolcsonzesek = await prisma.kolcsonzesek.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KolcsonzesekCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzesekCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kolcsonzesek.
     * @param {KolcsonzesekDeleteArgs} args - Arguments to delete one Kolcsonzesek.
     * @example
     * // Delete one Kolcsonzesek
     * const Kolcsonzesek = await prisma.kolcsonzesek.delete({
     *   where: {
     *     // ... filter to delete one Kolcsonzesek
     *   }
     * })
     * 
    **/
    delete<T extends KolcsonzesekDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzesekDeleteArgs<ExtArgs>>
    ): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Kolcsonzesek.
     * @param {KolcsonzesekUpdateArgs} args - Arguments to update one Kolcsonzesek.
     * @example
     * // Update one Kolcsonzesek
     * const kolcsonzesek = await prisma.kolcsonzesek.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KolcsonzesekUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzesekUpdateArgs<ExtArgs>>
    ): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Kolcsonzeseks.
     * @param {KolcsonzesekDeleteManyArgs} args - Arguments to filter Kolcsonzeseks to delete.
     * @example
     * // Delete a few Kolcsonzeseks
     * const { count } = await prisma.kolcsonzesek.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KolcsonzesekDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KolcsonzesekDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kolcsonzeseks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzesekUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kolcsonzeseks
     * const kolcsonzesek = await prisma.kolcsonzesek.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KolcsonzesekUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzesekUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kolcsonzesek.
     * @param {KolcsonzesekUpsertArgs} args - Arguments to update or create a Kolcsonzesek.
     * @example
     * // Update or create a Kolcsonzesek
     * const kolcsonzesek = await prisma.kolcsonzesek.upsert({
     *   create: {
     *     // ... data to create a Kolcsonzesek
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kolcsonzesek we want to update
     *   }
     * })
    **/
    upsert<T extends KolcsonzesekUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KolcsonzesekUpsertArgs<ExtArgs>>
    ): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Kolcsonzeseks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzesekCountArgs} args - Arguments to filter Kolcsonzeseks to count.
     * @example
     * // Count the number of Kolcsonzeseks
     * const count = await prisma.kolcsonzesek.count({
     *   where: {
     *     // ... the filter for the Kolcsonzeseks we want to count
     *   }
     * })
    **/
    count<T extends KolcsonzesekCountArgs>(
      args?: Subset<T, KolcsonzesekCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KolcsonzesekCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kolcsonzesek.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzesekAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KolcsonzesekAggregateArgs>(args: Subset<T, KolcsonzesekAggregateArgs>): Prisma.PrismaPromise<GetKolcsonzesekAggregateType<T>>

    /**
     * Group by Kolcsonzesek.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KolcsonzesekGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KolcsonzesekGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KolcsonzesekGroupByArgs['orderBy'] }
        : { orderBy?: KolcsonzesekGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KolcsonzesekGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKolcsonzesekGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kolcsonzesek model
   */
  readonly fields: KolcsonzesekFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kolcsonzesek.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KolcsonzesekClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    kolcsonzo<T extends KolcsonzoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KolcsonzoDefaultArgs<ExtArgs>>): Prisma__KolcsonzoClient<$Result.GetResult<Prisma.$KolcsonzoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    konyv<T extends KonyvekDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KonyvekDefaultArgs<ExtArgs>>): Prisma__KonyvekClient<$Result.GetResult<Prisma.$KonyvekPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    kesett<T extends Kolcsonzesek$kesettArgs<ExtArgs> = {}>(args?: Subset<T, Kolcsonzesek$kesettArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Kolcsonzesek model
   */ 
  interface KolcsonzesekFieldRefs {
    readonly id: FieldRef<"Kolcsonzesek", 'Int'>
    readonly kivitel: FieldRef<"Kolcsonzesek", 'DateTime'>
    readonly hatarido: FieldRef<"Kolcsonzesek", 'DateTime'>
    readonly Visszahozatal: FieldRef<"Kolcsonzesek", 'DateTime'>
    readonly kcs_id: FieldRef<"Kolcsonzesek", 'Int'>
    readonly kny_id: FieldRef<"Kolcsonzesek", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Kolcsonzesek findUnique
   */
  export type KolcsonzesekFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzesek to fetch.
     */
    where: KolcsonzesekWhereUniqueInput
  }


  /**
   * Kolcsonzesek findUniqueOrThrow
   */
  export type KolcsonzesekFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzesek to fetch.
     */
    where: KolcsonzesekWhereUniqueInput
  }


  /**
   * Kolcsonzesek findFirst
   */
  export type KolcsonzesekFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzesek to fetch.
     */
    where?: KolcsonzesekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kolcsonzeseks to fetch.
     */
    orderBy?: KolcsonzesekOrderByWithRelationInput | KolcsonzesekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kolcsonzeseks.
     */
    cursor?: KolcsonzesekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kolcsonzeseks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kolcsonzeseks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kolcsonzeseks.
     */
    distinct?: KolcsonzesekScalarFieldEnum | KolcsonzesekScalarFieldEnum[]
  }


  /**
   * Kolcsonzesek findFirstOrThrow
   */
  export type KolcsonzesekFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzesek to fetch.
     */
    where?: KolcsonzesekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kolcsonzeseks to fetch.
     */
    orderBy?: KolcsonzesekOrderByWithRelationInput | KolcsonzesekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kolcsonzeseks.
     */
    cursor?: KolcsonzesekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kolcsonzeseks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kolcsonzeseks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kolcsonzeseks.
     */
    distinct?: KolcsonzesekScalarFieldEnum | KolcsonzesekScalarFieldEnum[]
  }


  /**
   * Kolcsonzesek findMany
   */
  export type KolcsonzesekFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * Filter, which Kolcsonzeseks to fetch.
     */
    where?: KolcsonzesekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kolcsonzeseks to fetch.
     */
    orderBy?: KolcsonzesekOrderByWithRelationInput | KolcsonzesekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kolcsonzeseks.
     */
    cursor?: KolcsonzesekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kolcsonzeseks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kolcsonzeseks.
     */
    skip?: number
    distinct?: KolcsonzesekScalarFieldEnum | KolcsonzesekScalarFieldEnum[]
  }


  /**
   * Kolcsonzesek create
   */
  export type KolcsonzesekCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * The data needed to create a Kolcsonzesek.
     */
    data: XOR<KolcsonzesekCreateInput, KolcsonzesekUncheckedCreateInput>
  }


  /**
   * Kolcsonzesek createMany
   */
  export type KolcsonzesekCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kolcsonzeseks.
     */
    data: KolcsonzesekCreateManyInput | KolcsonzesekCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Kolcsonzesek update
   */
  export type KolcsonzesekUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * The data needed to update a Kolcsonzesek.
     */
    data: XOR<KolcsonzesekUpdateInput, KolcsonzesekUncheckedUpdateInput>
    /**
     * Choose, which Kolcsonzesek to update.
     */
    where: KolcsonzesekWhereUniqueInput
  }


  /**
   * Kolcsonzesek updateMany
   */
  export type KolcsonzesekUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kolcsonzeseks.
     */
    data: XOR<KolcsonzesekUpdateManyMutationInput, KolcsonzesekUncheckedUpdateManyInput>
    /**
     * Filter which Kolcsonzeseks to update
     */
    where?: KolcsonzesekWhereInput
  }


  /**
   * Kolcsonzesek upsert
   */
  export type KolcsonzesekUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * The filter to search for the Kolcsonzesek to update in case it exists.
     */
    where: KolcsonzesekWhereUniqueInput
    /**
     * In case the Kolcsonzesek found by the `where` argument doesn't exist, create a new Kolcsonzesek with this data.
     */
    create: XOR<KolcsonzesekCreateInput, KolcsonzesekUncheckedCreateInput>
    /**
     * In case the Kolcsonzesek was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KolcsonzesekUpdateInput, KolcsonzesekUncheckedUpdateInput>
  }


  /**
   * Kolcsonzesek delete
   */
  export type KolcsonzesekDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
    /**
     * Filter which Kolcsonzesek to delete.
     */
    where: KolcsonzesekWhereUniqueInput
  }


  /**
   * Kolcsonzesek deleteMany
   */
  export type KolcsonzesekDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kolcsonzeseks to delete
     */
    where?: KolcsonzesekWhereInput
  }


  /**
   * Kolcsonzesek.kesett
   */
  export type Kolcsonzesek$kesettArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    where?: KesesWhereInput
    orderBy?: KesesOrderByWithRelationInput | KesesOrderByWithRelationInput[]
    cursor?: KesesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KesesScalarFieldEnum | KesesScalarFieldEnum[]
  }


  /**
   * Kolcsonzesek without action
   */
  export type KolcsonzesekDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kolcsonzesek
     */
    select?: KolcsonzesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KolcsonzesekInclude<ExtArgs> | null
  }



  /**
   * Model Keses
   */

  export type AggregateKeses = {
    _count: KesesCountAggregateOutputType | null
    _avg: KesesAvgAggregateOutputType | null
    _sum: KesesSumAggregateOutputType | null
    _min: KesesMinAggregateOutputType | null
    _max: KesesMaxAggregateOutputType | null
  }

  export type KesesAvgAggregateOutputType = {
    id: number | null
    kcs_id: number | null
    kny_id: number | null
    kcsn_id: number | null
    kesettNapok: number | null
    kesesDij: number | null
  }

  export type KesesSumAggregateOutputType = {
    id: number | null
    kcs_id: number | null
    kny_id: number | null
    kcsn_id: number | null
    kesettNapok: number | null
    kesesDij: number | null
  }

  export type KesesMinAggregateOutputType = {
    id: number | null
    kcs_id: number | null
    kny_id: number | null
    kcsn_id: number | null
    kesettNapok: number | null
    kesesDij: number | null
  }

  export type KesesMaxAggregateOutputType = {
    id: number | null
    kcs_id: number | null
    kny_id: number | null
    kcsn_id: number | null
    kesettNapok: number | null
    kesesDij: number | null
  }

  export type KesesCountAggregateOutputType = {
    id: number
    kcs_id: number
    kny_id: number
    kcsn_id: number
    kesettNapok: number
    kesesDij: number
    _all: number
  }


  export type KesesAvgAggregateInputType = {
    id?: true
    kcs_id?: true
    kny_id?: true
    kcsn_id?: true
    kesettNapok?: true
    kesesDij?: true
  }

  export type KesesSumAggregateInputType = {
    id?: true
    kcs_id?: true
    kny_id?: true
    kcsn_id?: true
    kesettNapok?: true
    kesesDij?: true
  }

  export type KesesMinAggregateInputType = {
    id?: true
    kcs_id?: true
    kny_id?: true
    kcsn_id?: true
    kesettNapok?: true
    kesesDij?: true
  }

  export type KesesMaxAggregateInputType = {
    id?: true
    kcs_id?: true
    kny_id?: true
    kcsn_id?: true
    kesettNapok?: true
    kesesDij?: true
  }

  export type KesesCountAggregateInputType = {
    id?: true
    kcs_id?: true
    kny_id?: true
    kcsn_id?: true
    kesettNapok?: true
    kesesDij?: true
    _all?: true
  }

  export type KesesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keses to aggregate.
     */
    where?: KesesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keses to fetch.
     */
    orderBy?: KesesOrderByWithRelationInput | KesesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KesesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keses
    **/
    _count?: true | KesesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KesesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KesesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KesesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KesesMaxAggregateInputType
  }

  export type GetKesesAggregateType<T extends KesesAggregateArgs> = {
        [P in keyof T & keyof AggregateKeses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeses[P]>
      : GetScalarType<T[P], AggregateKeses[P]>
  }




  export type KesesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KesesWhereInput
    orderBy?: KesesOrderByWithAggregationInput | KesesOrderByWithAggregationInput[]
    by: KesesScalarFieldEnum[] | KesesScalarFieldEnum
    having?: KesesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KesesCountAggregateInputType | true
    _avg?: KesesAvgAggregateInputType
    _sum?: KesesSumAggregateInputType
    _min?: KesesMinAggregateInputType
    _max?: KesesMaxAggregateInputType
  }

  export type KesesGroupByOutputType = {
    id: number
    kcs_id: number
    kny_id: number
    kcsn_id: number
    kesettNapok: number
    kesesDij: number
    _count: KesesCountAggregateOutputType | null
    _avg: KesesAvgAggregateOutputType | null
    _sum: KesesSumAggregateOutputType | null
    _min: KesesMinAggregateOutputType | null
    _max: KesesMaxAggregateOutputType | null
  }

  type GetKesesGroupByPayload<T extends KesesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KesesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KesesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KesesGroupByOutputType[P]>
            : GetScalarType<T[P], KesesGroupByOutputType[P]>
        }
      >
    >


  export type KesesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kcs_id?: boolean
    kny_id?: boolean
    kcsn_id?: boolean
    kesettNapok?: boolean
    kesesDij?: boolean
    kolcsonzott?: boolean | KolcsonzesekDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keses"]>

  export type KesesSelectScalar = {
    id?: boolean
    kcs_id?: boolean
    kny_id?: boolean
    kcsn_id?: boolean
    kesettNapok?: boolean
    kesesDij?: boolean
  }

  export type KesesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kolcsonzott?: boolean | KolcsonzesekDefaultArgs<ExtArgs>
  }


  export type $KesesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Keses"
    objects: {
      kolcsonzott: Prisma.$KolcsonzesekPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kcs_id: number
      kny_id: number
      kcsn_id: number
      kesettNapok: number
      kesesDij: number
    }, ExtArgs["result"]["keses"]>
    composites: {}
  }


  type KesesGetPayload<S extends boolean | null | undefined | KesesDefaultArgs> = $Result.GetResult<Prisma.$KesesPayload, S>

  type KesesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KesesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KesesCountAggregateInputType | true
    }

  export interface KesesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Keses'], meta: { name: 'Keses' } }
    /**
     * Find zero or one Keses that matches the filter.
     * @param {KesesFindUniqueArgs} args - Arguments to find a Keses
     * @example
     * // Get one Keses
     * const keses = await prisma.keses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KesesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KesesFindUniqueArgs<ExtArgs>>
    ): Prisma__KesesClient<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Keses that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KesesFindUniqueOrThrowArgs} args - Arguments to find a Keses
     * @example
     * // Get one Keses
     * const keses = await prisma.keses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KesesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KesesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KesesClient<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Keses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KesesFindFirstArgs} args - Arguments to find a Keses
     * @example
     * // Get one Keses
     * const keses = await prisma.keses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KesesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KesesFindFirstArgs<ExtArgs>>
    ): Prisma__KesesClient<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Keses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KesesFindFirstOrThrowArgs} args - Arguments to find a Keses
     * @example
     * // Get one Keses
     * const keses = await prisma.keses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KesesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KesesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KesesClient<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Keses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KesesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keses
     * const keses = await prisma.keses.findMany()
     * 
     * // Get first 10 Keses
     * const keses = await prisma.keses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kesesWithIdOnly = await prisma.keses.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KesesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KesesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Keses.
     * @param {KesesCreateArgs} args - Arguments to create a Keses.
     * @example
     * // Create one Keses
     * const Keses = await prisma.keses.create({
     *   data: {
     *     // ... data to create a Keses
     *   }
     * })
     * 
    **/
    create<T extends KesesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KesesCreateArgs<ExtArgs>>
    ): Prisma__KesesClient<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Keses.
     *     @param {KesesCreateManyArgs} args - Arguments to create many Keses.
     *     @example
     *     // Create many Keses
     *     const keses = await prisma.keses.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KesesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KesesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Keses.
     * @param {KesesDeleteArgs} args - Arguments to delete one Keses.
     * @example
     * // Delete one Keses
     * const Keses = await prisma.keses.delete({
     *   where: {
     *     // ... filter to delete one Keses
     *   }
     * })
     * 
    **/
    delete<T extends KesesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KesesDeleteArgs<ExtArgs>>
    ): Prisma__KesesClient<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Keses.
     * @param {KesesUpdateArgs} args - Arguments to update one Keses.
     * @example
     * // Update one Keses
     * const keses = await prisma.keses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KesesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KesesUpdateArgs<ExtArgs>>
    ): Prisma__KesesClient<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Keses.
     * @param {KesesDeleteManyArgs} args - Arguments to filter Keses to delete.
     * @example
     * // Delete a few Keses
     * const { count } = await prisma.keses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KesesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KesesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KesesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keses
     * const keses = await prisma.keses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KesesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KesesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Keses.
     * @param {KesesUpsertArgs} args - Arguments to update or create a Keses.
     * @example
     * // Update or create a Keses
     * const keses = await prisma.keses.upsert({
     *   create: {
     *     // ... data to create a Keses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keses we want to update
     *   }
     * })
    **/
    upsert<T extends KesesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KesesUpsertArgs<ExtArgs>>
    ): Prisma__KesesClient<$Result.GetResult<Prisma.$KesesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Keses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KesesCountArgs} args - Arguments to filter Keses to count.
     * @example
     * // Count the number of Keses
     * const count = await prisma.keses.count({
     *   where: {
     *     // ... the filter for the Keses we want to count
     *   }
     * })
    **/
    count<T extends KesesCountArgs>(
      args?: Subset<T, KesesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KesesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KesesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KesesAggregateArgs>(args: Subset<T, KesesAggregateArgs>): Prisma.PrismaPromise<GetKesesAggregateType<T>>

    /**
     * Group by Keses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KesesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KesesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KesesGroupByArgs['orderBy'] }
        : { orderBy?: KesesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KesesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKesesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Keses model
   */
  readonly fields: KesesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Keses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KesesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    kolcsonzott<T extends KolcsonzesekDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KolcsonzesekDefaultArgs<ExtArgs>>): Prisma__KolcsonzesekClient<$Result.GetResult<Prisma.$KolcsonzesekPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Keses model
   */ 
  interface KesesFieldRefs {
    readonly id: FieldRef<"Keses", 'Int'>
    readonly kcs_id: FieldRef<"Keses", 'Int'>
    readonly kny_id: FieldRef<"Keses", 'Int'>
    readonly kcsn_id: FieldRef<"Keses", 'Int'>
    readonly kesettNapok: FieldRef<"Keses", 'Int'>
    readonly kesesDij: FieldRef<"Keses", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Keses findUnique
   */
  export type KesesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * Filter, which Keses to fetch.
     */
    where: KesesWhereUniqueInput
  }


  /**
   * Keses findUniqueOrThrow
   */
  export type KesesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * Filter, which Keses to fetch.
     */
    where: KesesWhereUniqueInput
  }


  /**
   * Keses findFirst
   */
  export type KesesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * Filter, which Keses to fetch.
     */
    where?: KesesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keses to fetch.
     */
    orderBy?: KesesOrderByWithRelationInput | KesesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keses.
     */
    cursor?: KesesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keses.
     */
    distinct?: KesesScalarFieldEnum | KesesScalarFieldEnum[]
  }


  /**
   * Keses findFirstOrThrow
   */
  export type KesesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * Filter, which Keses to fetch.
     */
    where?: KesesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keses to fetch.
     */
    orderBy?: KesesOrderByWithRelationInput | KesesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keses.
     */
    cursor?: KesesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keses.
     */
    distinct?: KesesScalarFieldEnum | KesesScalarFieldEnum[]
  }


  /**
   * Keses findMany
   */
  export type KesesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * Filter, which Keses to fetch.
     */
    where?: KesesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keses to fetch.
     */
    orderBy?: KesesOrderByWithRelationInput | KesesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keses.
     */
    cursor?: KesesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keses.
     */
    skip?: number
    distinct?: KesesScalarFieldEnum | KesesScalarFieldEnum[]
  }


  /**
   * Keses create
   */
  export type KesesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * The data needed to create a Keses.
     */
    data: XOR<KesesCreateInput, KesesUncheckedCreateInput>
  }


  /**
   * Keses createMany
   */
  export type KesesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Keses.
     */
    data: KesesCreateManyInput | KesesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Keses update
   */
  export type KesesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * The data needed to update a Keses.
     */
    data: XOR<KesesUpdateInput, KesesUncheckedUpdateInput>
    /**
     * Choose, which Keses to update.
     */
    where: KesesWhereUniqueInput
  }


  /**
   * Keses updateMany
   */
  export type KesesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Keses.
     */
    data: XOR<KesesUpdateManyMutationInput, KesesUncheckedUpdateManyInput>
    /**
     * Filter which Keses to update
     */
    where?: KesesWhereInput
  }


  /**
   * Keses upsert
   */
  export type KesesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * The filter to search for the Keses to update in case it exists.
     */
    where: KesesWhereUniqueInput
    /**
     * In case the Keses found by the `where` argument doesn't exist, create a new Keses with this data.
     */
    create: XOR<KesesCreateInput, KesesUncheckedCreateInput>
    /**
     * In case the Keses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KesesUpdateInput, KesesUncheckedUpdateInput>
  }


  /**
   * Keses delete
   */
  export type KesesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
    /**
     * Filter which Keses to delete.
     */
    where: KesesWhereUniqueInput
  }


  /**
   * Keses deleteMany
   */
  export type KesesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keses to delete
     */
    where?: KesesWhereInput
  }


  /**
   * Keses without action
   */
  export type KesesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keses
     */
    select?: KesesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KesesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const KolcsonzoScalarFieldEnum: {
    id: 'id',
    nev: 'nev',
    email: 'email',
    jelszo: 'jelszo',
    elsolatogatas: 'elsolatogatas',
    lakcim: 'lakcim',
    telszam: 'telszam',
    kesesek: 'kesesek'
  };

  export type KolcsonzoScalarFieldEnum = (typeof KolcsonzoScalarFieldEnum)[keyof typeof KolcsonzoScalarFieldEnum]


  export const KonyvekScalarFieldEnum: {
    id: 'id',
    cim: 'cim',
    iro: 'iro',
    kategoria: 'kategoria',
    kiadasDatuma: 'kiadasDatuma'
  };

  export type KonyvekScalarFieldEnum = (typeof KonyvekScalarFieldEnum)[keyof typeof KonyvekScalarFieldEnum]


  export const KolcsonzesekScalarFieldEnum: {
    id: 'id',
    kivitel: 'kivitel',
    hatarido: 'hatarido',
    Visszahozatal: 'Visszahozatal',
    kcs_id: 'kcs_id',
    kny_id: 'kny_id'
  };

  export type KolcsonzesekScalarFieldEnum = (typeof KolcsonzesekScalarFieldEnum)[keyof typeof KolcsonzesekScalarFieldEnum]


  export const KesesScalarFieldEnum: {
    id: 'id',
    kcs_id: 'kcs_id',
    kny_id: 'kny_id',
    kcsn_id: 'kcsn_id',
    kesettNapok: 'kesettNapok',
    kesesDij: 'kesesDij'
  };

  export type KesesScalarFieldEnum = (typeof KesesScalarFieldEnum)[keyof typeof KesesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type KolcsonzoWhereInput = {
    AND?: KolcsonzoWhereInput | KolcsonzoWhereInput[]
    OR?: KolcsonzoWhereInput[]
    NOT?: KolcsonzoWhereInput | KolcsonzoWhereInput[]
    id?: IntFilter<"Kolcsonzo"> | number
    nev?: StringFilter<"Kolcsonzo"> | string
    email?: StringFilter<"Kolcsonzo"> | string
    jelszo?: StringFilter<"Kolcsonzo"> | string
    elsolatogatas?: DateTimeFilter<"Kolcsonzo"> | Date | string
    lakcim?: StringFilter<"Kolcsonzo"> | string
    telszam?: StringFilter<"Kolcsonzo"> | string
    kesesek?: IntNullableFilter<"Kolcsonzo"> | number | null
    kolcsonzesek?: KolcsonzesekListRelationFilter
  }

  export type KolcsonzoOrderByWithRelationInput = {
    id?: SortOrder
    nev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    elsolatogatas?: SortOrder
    lakcim?: SortOrder
    telszam?: SortOrder
    kesesek?: SortOrderInput | SortOrder
    kolcsonzesek?: KolcsonzesekOrderByRelationAggregateInput
  }

  export type KolcsonzoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: KolcsonzoWhereInput | KolcsonzoWhereInput[]
    OR?: KolcsonzoWhereInput[]
    NOT?: KolcsonzoWhereInput | KolcsonzoWhereInput[]
    nev?: StringFilter<"Kolcsonzo"> | string
    jelszo?: StringFilter<"Kolcsonzo"> | string
    elsolatogatas?: DateTimeFilter<"Kolcsonzo"> | Date | string
    lakcim?: StringFilter<"Kolcsonzo"> | string
    telszam?: StringFilter<"Kolcsonzo"> | string
    kesesek?: IntNullableFilter<"Kolcsonzo"> | number | null
    kolcsonzesek?: KolcsonzesekListRelationFilter
  }, "id" | "email">

  export type KolcsonzoOrderByWithAggregationInput = {
    id?: SortOrder
    nev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    elsolatogatas?: SortOrder
    lakcim?: SortOrder
    telszam?: SortOrder
    kesesek?: SortOrderInput | SortOrder
    _count?: KolcsonzoCountOrderByAggregateInput
    _avg?: KolcsonzoAvgOrderByAggregateInput
    _max?: KolcsonzoMaxOrderByAggregateInput
    _min?: KolcsonzoMinOrderByAggregateInput
    _sum?: KolcsonzoSumOrderByAggregateInput
  }

  export type KolcsonzoScalarWhereWithAggregatesInput = {
    AND?: KolcsonzoScalarWhereWithAggregatesInput | KolcsonzoScalarWhereWithAggregatesInput[]
    OR?: KolcsonzoScalarWhereWithAggregatesInput[]
    NOT?: KolcsonzoScalarWhereWithAggregatesInput | KolcsonzoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kolcsonzo"> | number
    nev?: StringWithAggregatesFilter<"Kolcsonzo"> | string
    email?: StringWithAggregatesFilter<"Kolcsonzo"> | string
    jelszo?: StringWithAggregatesFilter<"Kolcsonzo"> | string
    elsolatogatas?: DateTimeWithAggregatesFilter<"Kolcsonzo"> | Date | string
    lakcim?: StringWithAggregatesFilter<"Kolcsonzo"> | string
    telszam?: StringWithAggregatesFilter<"Kolcsonzo"> | string
    kesesek?: IntNullableWithAggregatesFilter<"Kolcsonzo"> | number | null
  }

  export type KonyvekWhereInput = {
    AND?: KonyvekWhereInput | KonyvekWhereInput[]
    OR?: KonyvekWhereInput[]
    NOT?: KonyvekWhereInput | KonyvekWhereInput[]
    id?: IntFilter<"Konyvek"> | number
    cim?: StringFilter<"Konyvek"> | string
    iro?: StringFilter<"Konyvek"> | string
    kategoria?: StringFilter<"Konyvek"> | string
    kiadasDatuma?: StringFilter<"Konyvek"> | string
    kolcsonzesek?: KolcsonzesekListRelationFilter
  }

  export type KonyvekOrderByWithRelationInput = {
    id?: SortOrder
    cim?: SortOrder
    iro?: SortOrder
    kategoria?: SortOrder
    kiadasDatuma?: SortOrder
    kolcsonzesek?: KolcsonzesekOrderByRelationAggregateInput
  }

  export type KonyvekWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KonyvekWhereInput | KonyvekWhereInput[]
    OR?: KonyvekWhereInput[]
    NOT?: KonyvekWhereInput | KonyvekWhereInput[]
    cim?: StringFilter<"Konyvek"> | string
    iro?: StringFilter<"Konyvek"> | string
    kategoria?: StringFilter<"Konyvek"> | string
    kiadasDatuma?: StringFilter<"Konyvek"> | string
    kolcsonzesek?: KolcsonzesekListRelationFilter
  }, "id">

  export type KonyvekOrderByWithAggregationInput = {
    id?: SortOrder
    cim?: SortOrder
    iro?: SortOrder
    kategoria?: SortOrder
    kiadasDatuma?: SortOrder
    _count?: KonyvekCountOrderByAggregateInput
    _avg?: KonyvekAvgOrderByAggregateInput
    _max?: KonyvekMaxOrderByAggregateInput
    _min?: KonyvekMinOrderByAggregateInput
    _sum?: KonyvekSumOrderByAggregateInput
  }

  export type KonyvekScalarWhereWithAggregatesInput = {
    AND?: KonyvekScalarWhereWithAggregatesInput | KonyvekScalarWhereWithAggregatesInput[]
    OR?: KonyvekScalarWhereWithAggregatesInput[]
    NOT?: KonyvekScalarWhereWithAggregatesInput | KonyvekScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Konyvek"> | number
    cim?: StringWithAggregatesFilter<"Konyvek"> | string
    iro?: StringWithAggregatesFilter<"Konyvek"> | string
    kategoria?: StringWithAggregatesFilter<"Konyvek"> | string
    kiadasDatuma?: StringWithAggregatesFilter<"Konyvek"> | string
  }

  export type KolcsonzesekWhereInput = {
    AND?: KolcsonzesekWhereInput | KolcsonzesekWhereInput[]
    OR?: KolcsonzesekWhereInput[]
    NOT?: KolcsonzesekWhereInput | KolcsonzesekWhereInput[]
    id?: IntFilter<"Kolcsonzesek"> | number
    kivitel?: DateTimeFilter<"Kolcsonzesek"> | Date | string
    hatarido?: DateTimeFilter<"Kolcsonzesek"> | Date | string
    Visszahozatal?: DateTimeNullableFilter<"Kolcsonzesek"> | Date | string | null
    kcs_id?: IntFilter<"Kolcsonzesek"> | number
    kny_id?: IntFilter<"Kolcsonzesek"> | number
    kolcsonzo?: XOR<KolcsonzoRelationFilter, KolcsonzoWhereInput>
    konyv?: XOR<KonyvekRelationFilter, KonyvekWhereInput>
    kesett?: KesesListRelationFilter
  }

  export type KolcsonzesekOrderByWithRelationInput = {
    id?: SortOrder
    kivitel?: SortOrder
    hatarido?: SortOrder
    Visszahozatal?: SortOrderInput | SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    kolcsonzo?: KolcsonzoOrderByWithRelationInput
    konyv?: KonyvekOrderByWithRelationInput
    kesett?: KesesOrderByRelationAggregateInput
  }

  export type KolcsonzesekWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KolcsonzesekWhereInput | KolcsonzesekWhereInput[]
    OR?: KolcsonzesekWhereInput[]
    NOT?: KolcsonzesekWhereInput | KolcsonzesekWhereInput[]
    kivitel?: DateTimeFilter<"Kolcsonzesek"> | Date | string
    hatarido?: DateTimeFilter<"Kolcsonzesek"> | Date | string
    Visszahozatal?: DateTimeNullableFilter<"Kolcsonzesek"> | Date | string | null
    kcs_id?: IntFilter<"Kolcsonzesek"> | number
    kny_id?: IntFilter<"Kolcsonzesek"> | number
    kolcsonzo?: XOR<KolcsonzoRelationFilter, KolcsonzoWhereInput>
    konyv?: XOR<KonyvekRelationFilter, KonyvekWhereInput>
    kesett?: KesesListRelationFilter
  }, "id">

  export type KolcsonzesekOrderByWithAggregationInput = {
    id?: SortOrder
    kivitel?: SortOrder
    hatarido?: SortOrder
    Visszahozatal?: SortOrderInput | SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    _count?: KolcsonzesekCountOrderByAggregateInput
    _avg?: KolcsonzesekAvgOrderByAggregateInput
    _max?: KolcsonzesekMaxOrderByAggregateInput
    _min?: KolcsonzesekMinOrderByAggregateInput
    _sum?: KolcsonzesekSumOrderByAggregateInput
  }

  export type KolcsonzesekScalarWhereWithAggregatesInput = {
    AND?: KolcsonzesekScalarWhereWithAggregatesInput | KolcsonzesekScalarWhereWithAggregatesInput[]
    OR?: KolcsonzesekScalarWhereWithAggregatesInput[]
    NOT?: KolcsonzesekScalarWhereWithAggregatesInput | KolcsonzesekScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kolcsonzesek"> | number
    kivitel?: DateTimeWithAggregatesFilter<"Kolcsonzesek"> | Date | string
    hatarido?: DateTimeWithAggregatesFilter<"Kolcsonzesek"> | Date | string
    Visszahozatal?: DateTimeNullableWithAggregatesFilter<"Kolcsonzesek"> | Date | string | null
    kcs_id?: IntWithAggregatesFilter<"Kolcsonzesek"> | number
    kny_id?: IntWithAggregatesFilter<"Kolcsonzesek"> | number
  }

  export type KesesWhereInput = {
    AND?: KesesWhereInput | KesesWhereInput[]
    OR?: KesesWhereInput[]
    NOT?: KesesWhereInput | KesesWhereInput[]
    id?: IntFilter<"Keses"> | number
    kcs_id?: IntFilter<"Keses"> | number
    kny_id?: IntFilter<"Keses"> | number
    kcsn_id?: IntFilter<"Keses"> | number
    kesettNapok?: IntFilter<"Keses"> | number
    kesesDij?: IntFilter<"Keses"> | number
    kolcsonzott?: XOR<KolcsonzesekRelationFilter, KolcsonzesekWhereInput>
  }

  export type KesesOrderByWithRelationInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    kcsn_id?: SortOrder
    kesettNapok?: SortOrder
    kesesDij?: SortOrder
    kolcsonzott?: KolcsonzesekOrderByWithRelationInput
  }

  export type KesesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KesesWhereInput | KesesWhereInput[]
    OR?: KesesWhereInput[]
    NOT?: KesesWhereInput | KesesWhereInput[]
    kcs_id?: IntFilter<"Keses"> | number
    kny_id?: IntFilter<"Keses"> | number
    kcsn_id?: IntFilter<"Keses"> | number
    kesettNapok?: IntFilter<"Keses"> | number
    kesesDij?: IntFilter<"Keses"> | number
    kolcsonzott?: XOR<KolcsonzesekRelationFilter, KolcsonzesekWhereInput>
  }, "id">

  export type KesesOrderByWithAggregationInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    kcsn_id?: SortOrder
    kesettNapok?: SortOrder
    kesesDij?: SortOrder
    _count?: KesesCountOrderByAggregateInput
    _avg?: KesesAvgOrderByAggregateInput
    _max?: KesesMaxOrderByAggregateInput
    _min?: KesesMinOrderByAggregateInput
    _sum?: KesesSumOrderByAggregateInput
  }

  export type KesesScalarWhereWithAggregatesInput = {
    AND?: KesesScalarWhereWithAggregatesInput | KesesScalarWhereWithAggregatesInput[]
    OR?: KesesScalarWhereWithAggregatesInput[]
    NOT?: KesesScalarWhereWithAggregatesInput | KesesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Keses"> | number
    kcs_id?: IntWithAggregatesFilter<"Keses"> | number
    kny_id?: IntWithAggregatesFilter<"Keses"> | number
    kcsn_id?: IntWithAggregatesFilter<"Keses"> | number
    kesettNapok?: IntWithAggregatesFilter<"Keses"> | number
    kesesDij?: IntWithAggregatesFilter<"Keses"> | number
  }

  export type KolcsonzoCreateInput = {
    nev: string
    email: string
    jelszo: string
    elsolatogatas?: Date | string
    lakcim: string
    telszam: string
    kesesek?: number | null
    kolcsonzesek?: KolcsonzesekCreateNestedManyWithoutKolcsonzoInput
  }

  export type KolcsonzoUncheckedCreateInput = {
    id?: number
    nev: string
    email: string
    jelszo: string
    elsolatogatas?: Date | string
    lakcim: string
    telszam: string
    kesesek?: number | null
    kolcsonzesek?: KolcsonzesekUncheckedCreateNestedManyWithoutKolcsonzoInput
  }

  export type KolcsonzoUpdateInput = {
    nev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    elsolatogatas?: DateTimeFieldUpdateOperationsInput | Date | string
    lakcim?: StringFieldUpdateOperationsInput | string
    telszam?: StringFieldUpdateOperationsInput | string
    kesesek?: NullableIntFieldUpdateOperationsInput | number | null
    kolcsonzesek?: KolcsonzesekUpdateManyWithoutKolcsonzoNestedInput
  }

  export type KolcsonzoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    elsolatogatas?: DateTimeFieldUpdateOperationsInput | Date | string
    lakcim?: StringFieldUpdateOperationsInput | string
    telszam?: StringFieldUpdateOperationsInput | string
    kesesek?: NullableIntFieldUpdateOperationsInput | number | null
    kolcsonzesek?: KolcsonzesekUncheckedUpdateManyWithoutKolcsonzoNestedInput
  }

  export type KolcsonzoCreateManyInput = {
    id?: number
    nev: string
    email: string
    jelszo: string
    elsolatogatas?: Date | string
    lakcim: string
    telszam: string
    kesesek?: number | null
  }

  export type KolcsonzoUpdateManyMutationInput = {
    nev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    elsolatogatas?: DateTimeFieldUpdateOperationsInput | Date | string
    lakcim?: StringFieldUpdateOperationsInput | string
    telszam?: StringFieldUpdateOperationsInput | string
    kesesek?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KolcsonzoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    elsolatogatas?: DateTimeFieldUpdateOperationsInput | Date | string
    lakcim?: StringFieldUpdateOperationsInput | string
    telszam?: StringFieldUpdateOperationsInput | string
    kesesek?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KonyvekCreateInput = {
    cim: string
    iro: string
    kategoria: string
    kiadasDatuma: string
    kolcsonzesek?: KolcsonzesekCreateNestedManyWithoutKonyvInput
  }

  export type KonyvekUncheckedCreateInput = {
    id?: number
    cim: string
    iro: string
    kategoria: string
    kiadasDatuma: string
    kolcsonzesek?: KolcsonzesekUncheckedCreateNestedManyWithoutKonyvInput
  }

  export type KonyvekUpdateInput = {
    cim?: StringFieldUpdateOperationsInput | string
    iro?: StringFieldUpdateOperationsInput | string
    kategoria?: StringFieldUpdateOperationsInput | string
    kiadasDatuma?: StringFieldUpdateOperationsInput | string
    kolcsonzesek?: KolcsonzesekUpdateManyWithoutKonyvNestedInput
  }

  export type KonyvekUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cim?: StringFieldUpdateOperationsInput | string
    iro?: StringFieldUpdateOperationsInput | string
    kategoria?: StringFieldUpdateOperationsInput | string
    kiadasDatuma?: StringFieldUpdateOperationsInput | string
    kolcsonzesek?: KolcsonzesekUncheckedUpdateManyWithoutKonyvNestedInput
  }

  export type KonyvekCreateManyInput = {
    id?: number
    cim: string
    iro: string
    kategoria: string
    kiadasDatuma: string
  }

  export type KonyvekUpdateManyMutationInput = {
    cim?: StringFieldUpdateOperationsInput | string
    iro?: StringFieldUpdateOperationsInput | string
    kategoria?: StringFieldUpdateOperationsInput | string
    kiadasDatuma?: StringFieldUpdateOperationsInput | string
  }

  export type KonyvekUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cim?: StringFieldUpdateOperationsInput | string
    iro?: StringFieldUpdateOperationsInput | string
    kategoria?: StringFieldUpdateOperationsInput | string
    kiadasDatuma?: StringFieldUpdateOperationsInput | string
  }

  export type KolcsonzesekCreateInput = {
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kolcsonzo: KolcsonzoCreateNestedOneWithoutKolcsonzesekInput
    konyv: KonyvekCreateNestedOneWithoutKolcsonzesekInput
    kesett?: KesesCreateNestedManyWithoutKolcsonzottInput
  }

  export type KolcsonzesekUncheckedCreateInput = {
    id?: number
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kcs_id: number
    kny_id: number
    kesett?: KesesUncheckedCreateNestedManyWithoutKolcsonzottInput
  }

  export type KolcsonzesekUpdateInput = {
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kolcsonzo?: KolcsonzoUpdateOneRequiredWithoutKolcsonzesekNestedInput
    konyv?: KonyvekUpdateOneRequiredWithoutKolcsonzesekNestedInput
    kesett?: KesesUpdateManyWithoutKolcsonzottNestedInput
  }

  export type KolcsonzesekUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
    kesett?: KesesUncheckedUpdateManyWithoutKolcsonzottNestedInput
  }

  export type KolcsonzesekCreateManyInput = {
    id?: number
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kcs_id: number
    kny_id: number
  }

  export type KolcsonzesekUpdateManyMutationInput = {
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KolcsonzesekUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
  }

  export type KesesCreateInput = {
    kcs_id: number
    kny_id: number
    kesettNapok: number
    kesesDij: number
    kolcsonzott: KolcsonzesekCreateNestedOneWithoutKesettInput
  }

  export type KesesUncheckedCreateInput = {
    id?: number
    kcs_id: number
    kny_id: number
    kcsn_id: number
    kesettNapok: number
    kesesDij: number
  }

  export type KesesUpdateInput = {
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
    kesettNapok?: IntFieldUpdateOperationsInput | number
    kesesDij?: IntFieldUpdateOperationsInput | number
    kolcsonzott?: KolcsonzesekUpdateOneRequiredWithoutKesettNestedInput
  }

  export type KesesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
    kcsn_id?: IntFieldUpdateOperationsInput | number
    kesettNapok?: IntFieldUpdateOperationsInput | number
    kesesDij?: IntFieldUpdateOperationsInput | number
  }

  export type KesesCreateManyInput = {
    id?: number
    kcs_id: number
    kny_id: number
    kcsn_id: number
    kesettNapok: number
    kesesDij: number
  }

  export type KesesUpdateManyMutationInput = {
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
    kesettNapok?: IntFieldUpdateOperationsInput | number
    kesesDij?: IntFieldUpdateOperationsInput | number
  }

  export type KesesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
    kcsn_id?: IntFieldUpdateOperationsInput | number
    kesettNapok?: IntFieldUpdateOperationsInput | number
    kesesDij?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type KolcsonzesekListRelationFilter = {
    every?: KolcsonzesekWhereInput
    some?: KolcsonzesekWhereInput
    none?: KolcsonzesekWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type KolcsonzesekOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KolcsonzoCountOrderByAggregateInput = {
    id?: SortOrder
    nev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    elsolatogatas?: SortOrder
    lakcim?: SortOrder
    telszam?: SortOrder
    kesesek?: SortOrder
  }

  export type KolcsonzoAvgOrderByAggregateInput = {
    id?: SortOrder
    kesesek?: SortOrder
  }

  export type KolcsonzoMaxOrderByAggregateInput = {
    id?: SortOrder
    nev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    elsolatogatas?: SortOrder
    lakcim?: SortOrder
    telszam?: SortOrder
    kesesek?: SortOrder
  }

  export type KolcsonzoMinOrderByAggregateInput = {
    id?: SortOrder
    nev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    elsolatogatas?: SortOrder
    lakcim?: SortOrder
    telszam?: SortOrder
    kesesek?: SortOrder
  }

  export type KolcsonzoSumOrderByAggregateInput = {
    id?: SortOrder
    kesesek?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type KonyvekCountOrderByAggregateInput = {
    id?: SortOrder
    cim?: SortOrder
    iro?: SortOrder
    kategoria?: SortOrder
    kiadasDatuma?: SortOrder
  }

  export type KonyvekAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KonyvekMaxOrderByAggregateInput = {
    id?: SortOrder
    cim?: SortOrder
    iro?: SortOrder
    kategoria?: SortOrder
    kiadasDatuma?: SortOrder
  }

  export type KonyvekMinOrderByAggregateInput = {
    id?: SortOrder
    cim?: SortOrder
    iro?: SortOrder
    kategoria?: SortOrder
    kiadasDatuma?: SortOrder
  }

  export type KonyvekSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type KolcsonzoRelationFilter = {
    is?: KolcsonzoWhereInput
    isNot?: KolcsonzoWhereInput
  }

  export type KonyvekRelationFilter = {
    is?: KonyvekWhereInput
    isNot?: KonyvekWhereInput
  }

  export type KesesListRelationFilter = {
    every?: KesesWhereInput
    some?: KesesWhereInput
    none?: KesesWhereInput
  }

  export type KesesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KolcsonzesekCountOrderByAggregateInput = {
    id?: SortOrder
    kivitel?: SortOrder
    hatarido?: SortOrder
    Visszahozatal?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
  }

  export type KolcsonzesekAvgOrderByAggregateInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
  }

  export type KolcsonzesekMaxOrderByAggregateInput = {
    id?: SortOrder
    kivitel?: SortOrder
    hatarido?: SortOrder
    Visszahozatal?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
  }

  export type KolcsonzesekMinOrderByAggregateInput = {
    id?: SortOrder
    kivitel?: SortOrder
    hatarido?: SortOrder
    Visszahozatal?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
  }

  export type KolcsonzesekSumOrderByAggregateInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type KolcsonzesekRelationFilter = {
    is?: KolcsonzesekWhereInput
    isNot?: KolcsonzesekWhereInput
  }

  export type KesesCountOrderByAggregateInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    kcsn_id?: SortOrder
    kesettNapok?: SortOrder
    kesesDij?: SortOrder
  }

  export type KesesAvgOrderByAggregateInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    kcsn_id?: SortOrder
    kesettNapok?: SortOrder
    kesesDij?: SortOrder
  }

  export type KesesMaxOrderByAggregateInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    kcsn_id?: SortOrder
    kesettNapok?: SortOrder
    kesesDij?: SortOrder
  }

  export type KesesMinOrderByAggregateInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    kcsn_id?: SortOrder
    kesettNapok?: SortOrder
    kesesDij?: SortOrder
  }

  export type KesesSumOrderByAggregateInput = {
    id?: SortOrder
    kcs_id?: SortOrder
    kny_id?: SortOrder
    kcsn_id?: SortOrder
    kesettNapok?: SortOrder
    kesesDij?: SortOrder
  }

  export type KolcsonzesekCreateNestedManyWithoutKolcsonzoInput = {
    create?: XOR<KolcsonzesekCreateWithoutKolcsonzoInput, KolcsonzesekUncheckedCreateWithoutKolcsonzoInput> | KolcsonzesekCreateWithoutKolcsonzoInput[] | KolcsonzesekUncheckedCreateWithoutKolcsonzoInput[]
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKolcsonzoInput | KolcsonzesekCreateOrConnectWithoutKolcsonzoInput[]
    createMany?: KolcsonzesekCreateManyKolcsonzoInputEnvelope
    connect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
  }

  export type KolcsonzesekUncheckedCreateNestedManyWithoutKolcsonzoInput = {
    create?: XOR<KolcsonzesekCreateWithoutKolcsonzoInput, KolcsonzesekUncheckedCreateWithoutKolcsonzoInput> | KolcsonzesekCreateWithoutKolcsonzoInput[] | KolcsonzesekUncheckedCreateWithoutKolcsonzoInput[]
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKolcsonzoInput | KolcsonzesekCreateOrConnectWithoutKolcsonzoInput[]
    createMany?: KolcsonzesekCreateManyKolcsonzoInputEnvelope
    connect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KolcsonzesekUpdateManyWithoutKolcsonzoNestedInput = {
    create?: XOR<KolcsonzesekCreateWithoutKolcsonzoInput, KolcsonzesekUncheckedCreateWithoutKolcsonzoInput> | KolcsonzesekCreateWithoutKolcsonzoInput[] | KolcsonzesekUncheckedCreateWithoutKolcsonzoInput[]
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKolcsonzoInput | KolcsonzesekCreateOrConnectWithoutKolcsonzoInput[]
    upsert?: KolcsonzesekUpsertWithWhereUniqueWithoutKolcsonzoInput | KolcsonzesekUpsertWithWhereUniqueWithoutKolcsonzoInput[]
    createMany?: KolcsonzesekCreateManyKolcsonzoInputEnvelope
    set?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    disconnect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    delete?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    connect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    update?: KolcsonzesekUpdateWithWhereUniqueWithoutKolcsonzoInput | KolcsonzesekUpdateWithWhereUniqueWithoutKolcsonzoInput[]
    updateMany?: KolcsonzesekUpdateManyWithWhereWithoutKolcsonzoInput | KolcsonzesekUpdateManyWithWhereWithoutKolcsonzoInput[]
    deleteMany?: KolcsonzesekScalarWhereInput | KolcsonzesekScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KolcsonzesekUncheckedUpdateManyWithoutKolcsonzoNestedInput = {
    create?: XOR<KolcsonzesekCreateWithoutKolcsonzoInput, KolcsonzesekUncheckedCreateWithoutKolcsonzoInput> | KolcsonzesekCreateWithoutKolcsonzoInput[] | KolcsonzesekUncheckedCreateWithoutKolcsonzoInput[]
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKolcsonzoInput | KolcsonzesekCreateOrConnectWithoutKolcsonzoInput[]
    upsert?: KolcsonzesekUpsertWithWhereUniqueWithoutKolcsonzoInput | KolcsonzesekUpsertWithWhereUniqueWithoutKolcsonzoInput[]
    createMany?: KolcsonzesekCreateManyKolcsonzoInputEnvelope
    set?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    disconnect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    delete?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    connect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    update?: KolcsonzesekUpdateWithWhereUniqueWithoutKolcsonzoInput | KolcsonzesekUpdateWithWhereUniqueWithoutKolcsonzoInput[]
    updateMany?: KolcsonzesekUpdateManyWithWhereWithoutKolcsonzoInput | KolcsonzesekUpdateManyWithWhereWithoutKolcsonzoInput[]
    deleteMany?: KolcsonzesekScalarWhereInput | KolcsonzesekScalarWhereInput[]
  }

  export type KolcsonzesekCreateNestedManyWithoutKonyvInput = {
    create?: XOR<KolcsonzesekCreateWithoutKonyvInput, KolcsonzesekUncheckedCreateWithoutKonyvInput> | KolcsonzesekCreateWithoutKonyvInput[] | KolcsonzesekUncheckedCreateWithoutKonyvInput[]
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKonyvInput | KolcsonzesekCreateOrConnectWithoutKonyvInput[]
    createMany?: KolcsonzesekCreateManyKonyvInputEnvelope
    connect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
  }

  export type KolcsonzesekUncheckedCreateNestedManyWithoutKonyvInput = {
    create?: XOR<KolcsonzesekCreateWithoutKonyvInput, KolcsonzesekUncheckedCreateWithoutKonyvInput> | KolcsonzesekCreateWithoutKonyvInput[] | KolcsonzesekUncheckedCreateWithoutKonyvInput[]
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKonyvInput | KolcsonzesekCreateOrConnectWithoutKonyvInput[]
    createMany?: KolcsonzesekCreateManyKonyvInputEnvelope
    connect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
  }

  export type KolcsonzesekUpdateManyWithoutKonyvNestedInput = {
    create?: XOR<KolcsonzesekCreateWithoutKonyvInput, KolcsonzesekUncheckedCreateWithoutKonyvInput> | KolcsonzesekCreateWithoutKonyvInput[] | KolcsonzesekUncheckedCreateWithoutKonyvInput[]
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKonyvInput | KolcsonzesekCreateOrConnectWithoutKonyvInput[]
    upsert?: KolcsonzesekUpsertWithWhereUniqueWithoutKonyvInput | KolcsonzesekUpsertWithWhereUniqueWithoutKonyvInput[]
    createMany?: KolcsonzesekCreateManyKonyvInputEnvelope
    set?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    disconnect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    delete?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    connect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    update?: KolcsonzesekUpdateWithWhereUniqueWithoutKonyvInput | KolcsonzesekUpdateWithWhereUniqueWithoutKonyvInput[]
    updateMany?: KolcsonzesekUpdateManyWithWhereWithoutKonyvInput | KolcsonzesekUpdateManyWithWhereWithoutKonyvInput[]
    deleteMany?: KolcsonzesekScalarWhereInput | KolcsonzesekScalarWhereInput[]
  }

  export type KolcsonzesekUncheckedUpdateManyWithoutKonyvNestedInput = {
    create?: XOR<KolcsonzesekCreateWithoutKonyvInput, KolcsonzesekUncheckedCreateWithoutKonyvInput> | KolcsonzesekCreateWithoutKonyvInput[] | KolcsonzesekUncheckedCreateWithoutKonyvInput[]
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKonyvInput | KolcsonzesekCreateOrConnectWithoutKonyvInput[]
    upsert?: KolcsonzesekUpsertWithWhereUniqueWithoutKonyvInput | KolcsonzesekUpsertWithWhereUniqueWithoutKonyvInput[]
    createMany?: KolcsonzesekCreateManyKonyvInputEnvelope
    set?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    disconnect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    delete?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    connect?: KolcsonzesekWhereUniqueInput | KolcsonzesekWhereUniqueInput[]
    update?: KolcsonzesekUpdateWithWhereUniqueWithoutKonyvInput | KolcsonzesekUpdateWithWhereUniqueWithoutKonyvInput[]
    updateMany?: KolcsonzesekUpdateManyWithWhereWithoutKonyvInput | KolcsonzesekUpdateManyWithWhereWithoutKonyvInput[]
    deleteMany?: KolcsonzesekScalarWhereInput | KolcsonzesekScalarWhereInput[]
  }

  export type KolcsonzoCreateNestedOneWithoutKolcsonzesekInput = {
    create?: XOR<KolcsonzoCreateWithoutKolcsonzesekInput, KolcsonzoUncheckedCreateWithoutKolcsonzesekInput>
    connectOrCreate?: KolcsonzoCreateOrConnectWithoutKolcsonzesekInput
    connect?: KolcsonzoWhereUniqueInput
  }

  export type KonyvekCreateNestedOneWithoutKolcsonzesekInput = {
    create?: XOR<KonyvekCreateWithoutKolcsonzesekInput, KonyvekUncheckedCreateWithoutKolcsonzesekInput>
    connectOrCreate?: KonyvekCreateOrConnectWithoutKolcsonzesekInput
    connect?: KonyvekWhereUniqueInput
  }

  export type KesesCreateNestedManyWithoutKolcsonzottInput = {
    create?: XOR<KesesCreateWithoutKolcsonzottInput, KesesUncheckedCreateWithoutKolcsonzottInput> | KesesCreateWithoutKolcsonzottInput[] | KesesUncheckedCreateWithoutKolcsonzottInput[]
    connectOrCreate?: KesesCreateOrConnectWithoutKolcsonzottInput | KesesCreateOrConnectWithoutKolcsonzottInput[]
    createMany?: KesesCreateManyKolcsonzottInputEnvelope
    connect?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
  }

  export type KesesUncheckedCreateNestedManyWithoutKolcsonzottInput = {
    create?: XOR<KesesCreateWithoutKolcsonzottInput, KesesUncheckedCreateWithoutKolcsonzottInput> | KesesCreateWithoutKolcsonzottInput[] | KesesUncheckedCreateWithoutKolcsonzottInput[]
    connectOrCreate?: KesesCreateOrConnectWithoutKolcsonzottInput | KesesCreateOrConnectWithoutKolcsonzottInput[]
    createMany?: KesesCreateManyKolcsonzottInputEnvelope
    connect?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type KolcsonzoUpdateOneRequiredWithoutKolcsonzesekNestedInput = {
    create?: XOR<KolcsonzoCreateWithoutKolcsonzesekInput, KolcsonzoUncheckedCreateWithoutKolcsonzesekInput>
    connectOrCreate?: KolcsonzoCreateOrConnectWithoutKolcsonzesekInput
    upsert?: KolcsonzoUpsertWithoutKolcsonzesekInput
    connect?: KolcsonzoWhereUniqueInput
    update?: XOR<XOR<KolcsonzoUpdateToOneWithWhereWithoutKolcsonzesekInput, KolcsonzoUpdateWithoutKolcsonzesekInput>, KolcsonzoUncheckedUpdateWithoutKolcsonzesekInput>
  }

  export type KonyvekUpdateOneRequiredWithoutKolcsonzesekNestedInput = {
    create?: XOR<KonyvekCreateWithoutKolcsonzesekInput, KonyvekUncheckedCreateWithoutKolcsonzesekInput>
    connectOrCreate?: KonyvekCreateOrConnectWithoutKolcsonzesekInput
    upsert?: KonyvekUpsertWithoutKolcsonzesekInput
    connect?: KonyvekWhereUniqueInput
    update?: XOR<XOR<KonyvekUpdateToOneWithWhereWithoutKolcsonzesekInput, KonyvekUpdateWithoutKolcsonzesekInput>, KonyvekUncheckedUpdateWithoutKolcsonzesekInput>
  }

  export type KesesUpdateManyWithoutKolcsonzottNestedInput = {
    create?: XOR<KesesCreateWithoutKolcsonzottInput, KesesUncheckedCreateWithoutKolcsonzottInput> | KesesCreateWithoutKolcsonzottInput[] | KesesUncheckedCreateWithoutKolcsonzottInput[]
    connectOrCreate?: KesesCreateOrConnectWithoutKolcsonzottInput | KesesCreateOrConnectWithoutKolcsonzottInput[]
    upsert?: KesesUpsertWithWhereUniqueWithoutKolcsonzottInput | KesesUpsertWithWhereUniqueWithoutKolcsonzottInput[]
    createMany?: KesesCreateManyKolcsonzottInputEnvelope
    set?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
    disconnect?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
    delete?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
    connect?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
    update?: KesesUpdateWithWhereUniqueWithoutKolcsonzottInput | KesesUpdateWithWhereUniqueWithoutKolcsonzottInput[]
    updateMany?: KesesUpdateManyWithWhereWithoutKolcsonzottInput | KesesUpdateManyWithWhereWithoutKolcsonzottInput[]
    deleteMany?: KesesScalarWhereInput | KesesScalarWhereInput[]
  }

  export type KesesUncheckedUpdateManyWithoutKolcsonzottNestedInput = {
    create?: XOR<KesesCreateWithoutKolcsonzottInput, KesesUncheckedCreateWithoutKolcsonzottInput> | KesesCreateWithoutKolcsonzottInput[] | KesesUncheckedCreateWithoutKolcsonzottInput[]
    connectOrCreate?: KesesCreateOrConnectWithoutKolcsonzottInput | KesesCreateOrConnectWithoutKolcsonzottInput[]
    upsert?: KesesUpsertWithWhereUniqueWithoutKolcsonzottInput | KesesUpsertWithWhereUniqueWithoutKolcsonzottInput[]
    createMany?: KesesCreateManyKolcsonzottInputEnvelope
    set?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
    disconnect?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
    delete?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
    connect?: KesesWhereUniqueInput | KesesWhereUniqueInput[]
    update?: KesesUpdateWithWhereUniqueWithoutKolcsonzottInput | KesesUpdateWithWhereUniqueWithoutKolcsonzottInput[]
    updateMany?: KesesUpdateManyWithWhereWithoutKolcsonzottInput | KesesUpdateManyWithWhereWithoutKolcsonzottInput[]
    deleteMany?: KesesScalarWhereInput | KesesScalarWhereInput[]
  }

  export type KolcsonzesekCreateNestedOneWithoutKesettInput = {
    create?: XOR<KolcsonzesekCreateWithoutKesettInput, KolcsonzesekUncheckedCreateWithoutKesettInput>
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKesettInput
    connect?: KolcsonzesekWhereUniqueInput
  }

  export type KolcsonzesekUpdateOneRequiredWithoutKesettNestedInput = {
    create?: XOR<KolcsonzesekCreateWithoutKesettInput, KolcsonzesekUncheckedCreateWithoutKesettInput>
    connectOrCreate?: KolcsonzesekCreateOrConnectWithoutKesettInput
    upsert?: KolcsonzesekUpsertWithoutKesettInput
    connect?: KolcsonzesekWhereUniqueInput
    update?: XOR<XOR<KolcsonzesekUpdateToOneWithWhereWithoutKesettInput, KolcsonzesekUpdateWithoutKesettInput>, KolcsonzesekUncheckedUpdateWithoutKesettInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type KolcsonzesekCreateWithoutKolcsonzoInput = {
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    konyv: KonyvekCreateNestedOneWithoutKolcsonzesekInput
    kesett?: KesesCreateNestedManyWithoutKolcsonzottInput
  }

  export type KolcsonzesekUncheckedCreateWithoutKolcsonzoInput = {
    id?: number
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kny_id: number
    kesett?: KesesUncheckedCreateNestedManyWithoutKolcsonzottInput
  }

  export type KolcsonzesekCreateOrConnectWithoutKolcsonzoInput = {
    where: KolcsonzesekWhereUniqueInput
    create: XOR<KolcsonzesekCreateWithoutKolcsonzoInput, KolcsonzesekUncheckedCreateWithoutKolcsonzoInput>
  }

  export type KolcsonzesekCreateManyKolcsonzoInputEnvelope = {
    data: KolcsonzesekCreateManyKolcsonzoInput | KolcsonzesekCreateManyKolcsonzoInput[]
    skipDuplicates?: boolean
  }

  export type KolcsonzesekUpsertWithWhereUniqueWithoutKolcsonzoInput = {
    where: KolcsonzesekWhereUniqueInput
    update: XOR<KolcsonzesekUpdateWithoutKolcsonzoInput, KolcsonzesekUncheckedUpdateWithoutKolcsonzoInput>
    create: XOR<KolcsonzesekCreateWithoutKolcsonzoInput, KolcsonzesekUncheckedCreateWithoutKolcsonzoInput>
  }

  export type KolcsonzesekUpdateWithWhereUniqueWithoutKolcsonzoInput = {
    where: KolcsonzesekWhereUniqueInput
    data: XOR<KolcsonzesekUpdateWithoutKolcsonzoInput, KolcsonzesekUncheckedUpdateWithoutKolcsonzoInput>
  }

  export type KolcsonzesekUpdateManyWithWhereWithoutKolcsonzoInput = {
    where: KolcsonzesekScalarWhereInput
    data: XOR<KolcsonzesekUpdateManyMutationInput, KolcsonzesekUncheckedUpdateManyWithoutKolcsonzoInput>
  }

  export type KolcsonzesekScalarWhereInput = {
    AND?: KolcsonzesekScalarWhereInput | KolcsonzesekScalarWhereInput[]
    OR?: KolcsonzesekScalarWhereInput[]
    NOT?: KolcsonzesekScalarWhereInput | KolcsonzesekScalarWhereInput[]
    id?: IntFilter<"Kolcsonzesek"> | number
    kivitel?: DateTimeFilter<"Kolcsonzesek"> | Date | string
    hatarido?: DateTimeFilter<"Kolcsonzesek"> | Date | string
    Visszahozatal?: DateTimeNullableFilter<"Kolcsonzesek"> | Date | string | null
    kcs_id?: IntFilter<"Kolcsonzesek"> | number
    kny_id?: IntFilter<"Kolcsonzesek"> | number
  }

  export type KolcsonzesekCreateWithoutKonyvInput = {
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kolcsonzo: KolcsonzoCreateNestedOneWithoutKolcsonzesekInput
    kesett?: KesesCreateNestedManyWithoutKolcsonzottInput
  }

  export type KolcsonzesekUncheckedCreateWithoutKonyvInput = {
    id?: number
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kcs_id: number
    kesett?: KesesUncheckedCreateNestedManyWithoutKolcsonzottInput
  }

  export type KolcsonzesekCreateOrConnectWithoutKonyvInput = {
    where: KolcsonzesekWhereUniqueInput
    create: XOR<KolcsonzesekCreateWithoutKonyvInput, KolcsonzesekUncheckedCreateWithoutKonyvInput>
  }

  export type KolcsonzesekCreateManyKonyvInputEnvelope = {
    data: KolcsonzesekCreateManyKonyvInput | KolcsonzesekCreateManyKonyvInput[]
    skipDuplicates?: boolean
  }

  export type KolcsonzesekUpsertWithWhereUniqueWithoutKonyvInput = {
    where: KolcsonzesekWhereUniqueInput
    update: XOR<KolcsonzesekUpdateWithoutKonyvInput, KolcsonzesekUncheckedUpdateWithoutKonyvInput>
    create: XOR<KolcsonzesekCreateWithoutKonyvInput, KolcsonzesekUncheckedCreateWithoutKonyvInput>
  }

  export type KolcsonzesekUpdateWithWhereUniqueWithoutKonyvInput = {
    where: KolcsonzesekWhereUniqueInput
    data: XOR<KolcsonzesekUpdateWithoutKonyvInput, KolcsonzesekUncheckedUpdateWithoutKonyvInput>
  }

  export type KolcsonzesekUpdateManyWithWhereWithoutKonyvInput = {
    where: KolcsonzesekScalarWhereInput
    data: XOR<KolcsonzesekUpdateManyMutationInput, KolcsonzesekUncheckedUpdateManyWithoutKonyvInput>
  }

  export type KolcsonzoCreateWithoutKolcsonzesekInput = {
    nev: string
    email: string
    jelszo: string
    elsolatogatas?: Date | string
    lakcim: string
    telszam: string
    kesesek?: number | null
  }

  export type KolcsonzoUncheckedCreateWithoutKolcsonzesekInput = {
    id?: number
    nev: string
    email: string
    jelszo: string
    elsolatogatas?: Date | string
    lakcim: string
    telszam: string
    kesesek?: number | null
  }

  export type KolcsonzoCreateOrConnectWithoutKolcsonzesekInput = {
    where: KolcsonzoWhereUniqueInput
    create: XOR<KolcsonzoCreateWithoutKolcsonzesekInput, KolcsonzoUncheckedCreateWithoutKolcsonzesekInput>
  }

  export type KonyvekCreateWithoutKolcsonzesekInput = {
    cim: string
    iro: string
    kategoria: string
    kiadasDatuma: string
  }

  export type KonyvekUncheckedCreateWithoutKolcsonzesekInput = {
    id?: number
    cim: string
    iro: string
    kategoria: string
    kiadasDatuma: string
  }

  export type KonyvekCreateOrConnectWithoutKolcsonzesekInput = {
    where: KonyvekWhereUniqueInput
    create: XOR<KonyvekCreateWithoutKolcsonzesekInput, KonyvekUncheckedCreateWithoutKolcsonzesekInput>
  }

  export type KesesCreateWithoutKolcsonzottInput = {
    kcs_id: number
    kny_id: number
    kesettNapok: number
    kesesDij: number
  }

  export type KesesUncheckedCreateWithoutKolcsonzottInput = {
    id?: number
    kcs_id: number
    kny_id: number
    kesettNapok: number
    kesesDij: number
  }

  export type KesesCreateOrConnectWithoutKolcsonzottInput = {
    where: KesesWhereUniqueInput
    create: XOR<KesesCreateWithoutKolcsonzottInput, KesesUncheckedCreateWithoutKolcsonzottInput>
  }

  export type KesesCreateManyKolcsonzottInputEnvelope = {
    data: KesesCreateManyKolcsonzottInput | KesesCreateManyKolcsonzottInput[]
    skipDuplicates?: boolean
  }

  export type KolcsonzoUpsertWithoutKolcsonzesekInput = {
    update: XOR<KolcsonzoUpdateWithoutKolcsonzesekInput, KolcsonzoUncheckedUpdateWithoutKolcsonzesekInput>
    create: XOR<KolcsonzoCreateWithoutKolcsonzesekInput, KolcsonzoUncheckedCreateWithoutKolcsonzesekInput>
    where?: KolcsonzoWhereInput
  }

  export type KolcsonzoUpdateToOneWithWhereWithoutKolcsonzesekInput = {
    where?: KolcsonzoWhereInput
    data: XOR<KolcsonzoUpdateWithoutKolcsonzesekInput, KolcsonzoUncheckedUpdateWithoutKolcsonzesekInput>
  }

  export type KolcsonzoUpdateWithoutKolcsonzesekInput = {
    nev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    elsolatogatas?: DateTimeFieldUpdateOperationsInput | Date | string
    lakcim?: StringFieldUpdateOperationsInput | string
    telszam?: StringFieldUpdateOperationsInput | string
    kesesek?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KolcsonzoUncheckedUpdateWithoutKolcsonzesekInput = {
    id?: IntFieldUpdateOperationsInput | number
    nev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    elsolatogatas?: DateTimeFieldUpdateOperationsInput | Date | string
    lakcim?: StringFieldUpdateOperationsInput | string
    telszam?: StringFieldUpdateOperationsInput | string
    kesesek?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KonyvekUpsertWithoutKolcsonzesekInput = {
    update: XOR<KonyvekUpdateWithoutKolcsonzesekInput, KonyvekUncheckedUpdateWithoutKolcsonzesekInput>
    create: XOR<KonyvekCreateWithoutKolcsonzesekInput, KonyvekUncheckedCreateWithoutKolcsonzesekInput>
    where?: KonyvekWhereInput
  }

  export type KonyvekUpdateToOneWithWhereWithoutKolcsonzesekInput = {
    where?: KonyvekWhereInput
    data: XOR<KonyvekUpdateWithoutKolcsonzesekInput, KonyvekUncheckedUpdateWithoutKolcsonzesekInput>
  }

  export type KonyvekUpdateWithoutKolcsonzesekInput = {
    cim?: StringFieldUpdateOperationsInput | string
    iro?: StringFieldUpdateOperationsInput | string
    kategoria?: StringFieldUpdateOperationsInput | string
    kiadasDatuma?: StringFieldUpdateOperationsInput | string
  }

  export type KonyvekUncheckedUpdateWithoutKolcsonzesekInput = {
    id?: IntFieldUpdateOperationsInput | number
    cim?: StringFieldUpdateOperationsInput | string
    iro?: StringFieldUpdateOperationsInput | string
    kategoria?: StringFieldUpdateOperationsInput | string
    kiadasDatuma?: StringFieldUpdateOperationsInput | string
  }

  export type KesesUpsertWithWhereUniqueWithoutKolcsonzottInput = {
    where: KesesWhereUniqueInput
    update: XOR<KesesUpdateWithoutKolcsonzottInput, KesesUncheckedUpdateWithoutKolcsonzottInput>
    create: XOR<KesesCreateWithoutKolcsonzottInput, KesesUncheckedCreateWithoutKolcsonzottInput>
  }

  export type KesesUpdateWithWhereUniqueWithoutKolcsonzottInput = {
    where: KesesWhereUniqueInput
    data: XOR<KesesUpdateWithoutKolcsonzottInput, KesesUncheckedUpdateWithoutKolcsonzottInput>
  }

  export type KesesUpdateManyWithWhereWithoutKolcsonzottInput = {
    where: KesesScalarWhereInput
    data: XOR<KesesUpdateManyMutationInput, KesesUncheckedUpdateManyWithoutKolcsonzottInput>
  }

  export type KesesScalarWhereInput = {
    AND?: KesesScalarWhereInput | KesesScalarWhereInput[]
    OR?: KesesScalarWhereInput[]
    NOT?: KesesScalarWhereInput | KesesScalarWhereInput[]
    id?: IntFilter<"Keses"> | number
    kcs_id?: IntFilter<"Keses"> | number
    kny_id?: IntFilter<"Keses"> | number
    kcsn_id?: IntFilter<"Keses"> | number
    kesettNapok?: IntFilter<"Keses"> | number
    kesesDij?: IntFilter<"Keses"> | number
  }

  export type KolcsonzesekCreateWithoutKesettInput = {
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kolcsonzo: KolcsonzoCreateNestedOneWithoutKolcsonzesekInput
    konyv: KonyvekCreateNestedOneWithoutKolcsonzesekInput
  }

  export type KolcsonzesekUncheckedCreateWithoutKesettInput = {
    id?: number
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kcs_id: number
    kny_id: number
  }

  export type KolcsonzesekCreateOrConnectWithoutKesettInput = {
    where: KolcsonzesekWhereUniqueInput
    create: XOR<KolcsonzesekCreateWithoutKesettInput, KolcsonzesekUncheckedCreateWithoutKesettInput>
  }

  export type KolcsonzesekUpsertWithoutKesettInput = {
    update: XOR<KolcsonzesekUpdateWithoutKesettInput, KolcsonzesekUncheckedUpdateWithoutKesettInput>
    create: XOR<KolcsonzesekCreateWithoutKesettInput, KolcsonzesekUncheckedCreateWithoutKesettInput>
    where?: KolcsonzesekWhereInput
  }

  export type KolcsonzesekUpdateToOneWithWhereWithoutKesettInput = {
    where?: KolcsonzesekWhereInput
    data: XOR<KolcsonzesekUpdateWithoutKesettInput, KolcsonzesekUncheckedUpdateWithoutKesettInput>
  }

  export type KolcsonzesekUpdateWithoutKesettInput = {
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kolcsonzo?: KolcsonzoUpdateOneRequiredWithoutKolcsonzesekNestedInput
    konyv?: KonyvekUpdateOneRequiredWithoutKolcsonzesekNestedInput
  }

  export type KolcsonzesekUncheckedUpdateWithoutKesettInput = {
    id?: IntFieldUpdateOperationsInput | number
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
  }

  export type KolcsonzesekCreateManyKolcsonzoInput = {
    id?: number
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kny_id: number
  }

  export type KolcsonzesekUpdateWithoutKolcsonzoInput = {
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    konyv?: KonyvekUpdateOneRequiredWithoutKolcsonzesekNestedInput
    kesett?: KesesUpdateManyWithoutKolcsonzottNestedInput
  }

  export type KolcsonzesekUncheckedUpdateWithoutKolcsonzoInput = {
    id?: IntFieldUpdateOperationsInput | number
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kny_id?: IntFieldUpdateOperationsInput | number
    kesett?: KesesUncheckedUpdateManyWithoutKolcsonzottNestedInput
  }

  export type KolcsonzesekUncheckedUpdateManyWithoutKolcsonzoInput = {
    id?: IntFieldUpdateOperationsInput | number
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kny_id?: IntFieldUpdateOperationsInput | number
  }

  export type KolcsonzesekCreateManyKonyvInput = {
    id?: number
    kivitel?: Date | string
    hatarido: Date | string
    Visszahozatal?: Date | string | null
    kcs_id: number
  }

  export type KolcsonzesekUpdateWithoutKonyvInput = {
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kolcsonzo?: KolcsonzoUpdateOneRequiredWithoutKolcsonzesekNestedInput
    kesett?: KesesUpdateManyWithoutKolcsonzottNestedInput
  }

  export type KolcsonzesekUncheckedUpdateWithoutKonyvInput = {
    id?: IntFieldUpdateOperationsInput | number
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kcs_id?: IntFieldUpdateOperationsInput | number
    kesett?: KesesUncheckedUpdateManyWithoutKolcsonzottNestedInput
  }

  export type KolcsonzesekUncheckedUpdateManyWithoutKonyvInput = {
    id?: IntFieldUpdateOperationsInput | number
    kivitel?: DateTimeFieldUpdateOperationsInput | Date | string
    hatarido?: DateTimeFieldUpdateOperationsInput | Date | string
    Visszahozatal?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kcs_id?: IntFieldUpdateOperationsInput | number
  }

  export type KesesCreateManyKolcsonzottInput = {
    id?: number
    kcs_id: number
    kny_id: number
    kesettNapok: number
    kesesDij: number
  }

  export type KesesUpdateWithoutKolcsonzottInput = {
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
    kesettNapok?: IntFieldUpdateOperationsInput | number
    kesesDij?: IntFieldUpdateOperationsInput | number
  }

  export type KesesUncheckedUpdateWithoutKolcsonzottInput = {
    id?: IntFieldUpdateOperationsInput | number
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
    kesettNapok?: IntFieldUpdateOperationsInput | number
    kesesDij?: IntFieldUpdateOperationsInput | number
  }

  export type KesesUncheckedUpdateManyWithoutKolcsonzottInput = {
    id?: IntFieldUpdateOperationsInput | number
    kcs_id?: IntFieldUpdateOperationsInput | number
    kny_id?: IntFieldUpdateOperationsInput | number
    kesettNapok?: IntFieldUpdateOperationsInput | number
    kesesDij?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use KolcsonzoCountOutputTypeDefaultArgs instead
     */
    export type KolcsonzoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KolcsonzoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KonyvekCountOutputTypeDefaultArgs instead
     */
    export type KonyvekCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KonyvekCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KolcsonzesekCountOutputTypeDefaultArgs instead
     */
    export type KolcsonzesekCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KolcsonzesekCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KolcsonzoDefaultArgs instead
     */
    export type KolcsonzoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KolcsonzoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KonyvekDefaultArgs instead
     */
    export type KonyvekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KonyvekDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KolcsonzesekDefaultArgs instead
     */
    export type KolcsonzesekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KolcsonzesekDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KesesDefaultArgs instead
     */
    export type KesesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KesesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}